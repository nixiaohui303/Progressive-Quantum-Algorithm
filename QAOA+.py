#!/usr/bin/env python
# coding: utf-8

# In[1]:


# 代码功能：
# 设置线路深度p从1到n，每个线路深度下p*100次全局随机初始化，统计每个线路深度下所能找到的max_loss,avg_loss,以及运行p*100次RI所需要的运行时间


# In[2]:


from mindquantum.core.circuit import Circuit, UN
from mindquantum.core.gates import H, ZZ, RX,RZ,X,I,Measure
from mindquantum.core.operators import Hamiltonian, QubitOperator
from mindquantum.framework import MQAnsatzOnlyLayer,MQLayer,MQAnsatzOnlyOps
from mindquantum.simulator import Simulator
from mindspore.common.initializer import Normal,initializer
from mindspore import Tensor,ops
from mindspore import dtype as mstype
from mindspore.common.parameter import Parameter
from mindspore.nn import Adam, TrainOneStepCell                   # 导入Adam模块和TrainOneStepCell模块

import networkx as nx
import mindspore.nn as nn
import mindspore as ms
import mindquantum as mq
import seaborn as sns
from math import pi


import matplotlib.pyplot as plt
import numpy as np
from math import pi
from mpl_toolkits.mplot3d import Axes3D



# 加载额外需要用到的包
import numpy as np
import matplotlib.pyplot as plt
import networkx as nx
import random
import time


import warnings
warnings.filterwarnings("ignore")

# 将数据保存在服务器上所需代码
import logging
import sys
import datetime
 
def init_logger(filename, logger_name):
    '''
    @brief:
        initialize logger that redirect info to a file just in case we lost connection to the notebook
    @params:
        filename: to which file should we log all the info
        logger_name: an alias to the logger
    '''
 
    # get current timestamp
    timestamp = datetime.datetime.utcnow().strftime('%Y%m%d_%H-%M-%S')
    
    logging.basicConfig(
        level=logging.INFO, 
        format='%(message)s',
#         format='%(message)s',
        handlers=[
            logging.FileHandler(filename=filename,encoding='utf-8'),
            logging.StreamHandler(sys.stdout)
        ]
    )
 
    # Test
    logger = logging.getLogger(logger_name)
   #logger.info('### Init. Logger {} ###'.format(logger_name))
    return logger


# Initialize
my_logger = init_logger("data/RI/n=14/3-regular/graph1,p>=11.log", "ml_logger")


# In[3]:


# 获取顶点i的相邻顶点信息
def get_info_neighbors(g):
    info = {}
    
    n = len(g.nodes()) # 当前子图内的顶点数目
    # 遍历相邻顶点并存储
    for k in g.nodes():
        # 存储顶点k的邻接点
        neighbors = []
        # 遍历边
        for u,v in g.edges:
            if v == k:
                neighbors.append(u)
            if u == k:
                neighbors.append(v)
        # 将k和其邻接点存储到字典info内
        info[k] = neighbors
#     my_logger.info('顶点以及其相邻顶点信息为：{}'.format(info))
    return info  


# In[4]:


# 创建初始态，这里选取的是全0态
def create_encoder():
    encoder = Circuit()
    return encoder



# 根据目标哈密顿量搭建电路U_H_D，参数为gamma
def build_U_HD(layer,g):
    # 初始化量子电路
    cir_HD = Circuit()
    for v in g.nodes:
        cir_HD += RZ('gamma{}'.format(layer)).on(v)
    return cir_HD


# 根据初始哈密顿量搭建电路U_H_M，参数为beta
def build_U_HM(layer,info,g,target_graph):
    n = len(target_graph.nodes())
    
    # 初始化2n个量子比特的量子电路，其中有n个为辅助比特
    cir_HM = Circuit()
    
    
    for key, value in info.items():
#         my_logger.info('key = {},value = {}'.format(key,value))
        
        if (len(value)) != 0:
            # 邻接比特状态翻转
            for i in range(0,len(value)):
                cir_HM += X.on(value[i])
                

            # 直接实现多量子比特控制门,第一位为控制位，第二位为目标位
            cir_HM += RX('beta{}'.format(layer)).on(key,value)

            # #邻接比特状态翻转
            for i in range(0,len(value)):
                cir_HM += X.on(value[i])
            cir_HM.barrier()
        else:
            # 直接翻转，因为这是一个孤立点，可直接加入顶点子集
            cir_HM += RX('beta{}'.format(layer)).on(key)
            cir_HM.barrier()
            
         
        
    return cir_HM



# 搭建P层QAOA电路
def build_ansatz(p,g,target_graph):
    print(g.nodes())
    # 初始态制备,只要是可行解即可
    encoder = create_encoder()
    
    # 获取相邻顶点信息，用于电路搭建
    info = get_info_neighbors(g)
    
    # QAOA,p层ansatz,先搭建目标哈密顿量对应的线路，然后是初始哈密顿量对应的线路
    ansatz = Circuit()
    for layer in range(1,p+1):
        ansatz += build_U_HD(layer,g)
        ansatz += build_U_HM(layer,info,g,target_graph)
        # 添加屏障
        ansatz.barrier()

    return encoder,ansatz





# 只有ansatz，无encoder
class MQAnsatzOnlyLayer(nn.Cell):
    def __init__(self, expectation_with_grad,params, weight='normal'):
        """Initialize a MQAnsatzOnlyLayer object."""
        super().__init__()
        self.evolution = MQAnsatzOnlyOps(expectation_with_grad)
        weight_size = len(self.evolution.expectation_with_grad.ansatz_params_name)
#         print('weight_size = {} '.format(weight_size))

        if isinstance(weight, ms.Tensor):
            if weight.ndim != 1 or weight.shape[0] != weight_size:
                raise ValueError(f"Weight init shape error, required ({weight_size}, ), but get f{weight.shape}.")
        # Parameter是变量张量，代表在训练网络时，需要被更新的参数
        # initializer()是一个初始化器，调用这个接口可生成initializer对象（我输出这个对象和参数，发现两者是不同的）
#         self.weight = Parameter(initializer(weight, weight_size, dtype=ms.float32), name='ansatz_weight')
#         print(initializer(weight,weight_size,dtype=ms.float32))
        
        
        # 基于Tensor实现参数的初始化,基于np.random.rand(m)可以返回一个长度为m的数组
        # 初始参数params = [gamma0,beta0,gamma1,beta1...],params是一个数组
        self.weight =  Parameter(params.astype(np.float32), name='ansatz_weight')
        my_logger.info('weight = {}'.format(self.weight.asnumpy()))
        

    def construct(self):
        """Construct a MQAnsatzOnlyLayer node."""
        return self.evolution(self.weight)
    


# In[5]:


def calculate_initial_expectation_value(g,layer,beta,gamma):
    # 存储参数,先存储gamma,再存储beta
    params = []
    for i in range(0,len(beta)):
        params.append(gamma[i])
        params.append(beta[i])
        
    # 搭建QAOA 线路
    encoder,ansatz = build_ansatz(layer,g,target_graph)              # 生成ansatz线路
    circ = encoder + ansatz              # 将初始化线路与ansatz线路组合成一个线路
    circ.as_ansatz()
    
    # 将列表转换为数组
    sim = Simulator('mqvector', circ.n_qubits)                     # 创建模拟器，backend使用‘mqvector’，能模拟5个比特（'circ'线路中包含的比特数）
    ham = build_ham(g)
    print(ham)
    
    # Create a parameter resolver
    pr = dict(zip(circ.params_name,params))

    # 应用电路到模拟器上
    sim.apply_circuit(circ, pr = pr)
#     print(sim.get_qs(True))

    # Compute the expectation value of the Hamiltonian
    expectation = sim.get_expectation(ham)
    return -1*(expectation.real)



# # 计算参数迁移对应的初始期望函数值，不需要优化
# def calculate_initial_expectation_value(g,layer,beta,gamma):
#     lr = 0
    
#     # 存储参数,先存储gamma,再存储beta
#     params = []
#     for i in range(0,len(beta)):
#         params.append(gamma[i])
#         params.append(beta[i])
    
    
#     ms.set_context(mode=ms.PYNATIVE_MODE, device_target="CPU")
    
#     # 搭建QAOA 线路
#     encoder,ansatz = build_ansatz(layer,g,target_graph)              # 生成ansatz线路
#     circ = encoder + ansatz              # 将初始化线路与ansatz线路组合成一个线路
 
#     # 将列表转换为数组
#     params = np.array(params)
#     sim = Simulator('projectq', circ.n_qubits)                     # 创建模拟器，backend使用‘mqvector’，能模拟5个比特（'circ'线路中包含的比特数）
#     ham = build_ham(sub_graph)
#     print(ham)
    
#     grad_ops = sim.get_expectation_with_grad(ham, circ)            # 获取计算变分量子线路的期望值和梯度的算子
#     QuantumNet = MQAnsatzOnlyLayer((grad_ops),params)
    
    
    
#     opti = Adam(QuantumNet.trainable_params(), learning_rate=lr)     # 需要优化的是Quantumnet中可训练的参数，学习率设为0.5
#     train_net = nn.TrainOneStepCell(QuantumNet, opti)                     # 对神经网络进行一步训练
    
  
#     # train_net().asnumpy()是一个数组,返回优化后的期望值，注意存放的位置在测量之前
#     loss = train_net().asnumpy()[0]  
        
    
#     # 返回迁移参数对应的初始期望函数值
#     return -round(loss,5)


# In[6]:


# # 迭代停止条件：最大迭代步数
# def execute_function(g,layer,beta,gamma):
# #     my_logger.info('layer = {},initial_beta = {},initial_gamma = {}'.format(layer,beta,gamma))
#     lr = 0.05
#     if layer >= 10:
#         ITR = 600# 训练迭代的次数
        
#     else:
#         if layer>=8:
#             ITR = 550
            
#         else:
#             ITR = 500
    
#     # 存储参数,先存储gamma,再存储beta
#     params = []
#     for i in range(0,len(beta)):
#         params.append(gamma[i])
#         params.append(beta[i])
    
    
#     ms.set_context(mode=ms.PYNATIVE_MODE, device_target="CPU")
    
#     # 搭建QAOA 线路
# #     init_state_circ = UN(H, g.nodes)             # 生成均匀叠加态，即对所有量子比特作用H门
#     encoder,ansatz = build_ansatz(layer,g,target_graph)              # 生成ansatz线路
#     circ = encoder + ansatz              # 将初始化线路与ansatz线路组合成一个线路
# #     circ.svg().to_file(filename='Circuit_{}.svg'.format(len(g.nodes())))
    
    
#     # 将列表转换为数组
#     params = np.array(params)
#     sim = Simulator('mqvector', circ.n_qubits)                     # 创建模拟器，backend使用‘mqvector’，能模拟5个比特（'circ'线路中包含的比特数）
#     ham = build_ham(g)
    
#     initial_expectation_value = calculate_initial_expectation_value(g,layer,beta,gamma)
#     print('initial_ex = {}'.format(initial_expectation_value))
    
    
    
#     grad_ops = sim.get_expectation_with_grad(ham, circ)            # 获取计算变分量子线路的期望值和梯度的算子
#     QuantumNet = MQAnsatzOnlyLayer((grad_ops),params)
    
    
    
#     opti = Adam(QuantumNet.trainable_params(), learning_rate=lr)     # 需要优化的是Quantumnet中可训练的参数，学习率设为0.5
#     train_net = nn.TrainOneStepCell(QuantumNet, opti)                     # 对神经网络进行一步训练
    
#     my_logger.info('lr = {},ITR = {}'.format(lr,ITR))
#     for i in range(0,ITR+1):
#         if i%10 == 0:
#             # train_net().asnumpy()是一个数组,返回优化后的期望值，注意存放的位置在测量之前
#             loss = train_net().asnumpy()[0]  
            
#             # 关于哈密顿量的期望值train_net.asnumpy(),train_net()是一个Tensor
#             if i%50 == 0:
#                 my_logger.info("train_step = {},loss = {}".format(i,round(loss,5)))  # 每训练50步，打印当前训练步数和当前得到的期望值  
        
    
#     # 获取优化后的参数
#     beta_opt = []
#     gamma_opt = []
#     params = []
    
#     # 获取线路参数
#     pr = dict(zip(ansatz.params_name, QuantumNet.weight.asnumpy())) # 获取线路参数
#     for key,value in pr.items():
#         params.append(value)
#     my_logger.info('优化后线路参数params = {}'.format(params))
    
#     for i in range(0,len(params)):
#         if i%2==0:
#             gamma_opt.append(params[i])
#         else:
#             beta_opt.append(params[i])
       
#      # 测量量子比特
#     for i in g.nodes():
#         circ += Measure('q_{}'.format(i)).on(i)  # 在顶点i上作用一个测量，并将该测量命名为'q_{i}'
    
# #     circ.svg().to_file(filename='Circuit{}.svg'.format(len(g.nodes())))
         
#     result = sim.sampling(circ, pr=pr, shots=1000)
    
    
#     # 最大化loss
#     return result,gamma_opt,beta_opt,-round(loss,5)


# In[7]:


# 迭代停止条件：收敛误差
def execute_function(g,layer,beta,gamma):
#     my_logger.info('layer = {},initial_beta = {},initial_gamma = {}'.format(layer,beta,gamma))
    lr = 0.05
    ITR = 600 # 最大迭代步数
    
    # 存储参数,先存储gamma,再存储beta
    params = []
    for i in range(0,len(beta)):
        params.append(gamma[i])
        params.append(beta[i])
    
    
    ms.set_context(mode=ms.PYNATIVE_MODE, device_target="CPU")
    
    # 搭建QAOA 线路
#     init_state_circ = UN(H, g.nodes)             # 生成均匀叠加态，即对所有量子比特作用H门
    encoder,ansatz = build_ansatz(layer,g,target_graph)              # 生成ansatz线路
    circ = encoder + ansatz              # 将初始化线路与ansatz线路组合成一个线路
#     circ.svg().to_file(filename='Circuit_{}.svg'.format(len(g.nodes())))
    
    
    # 将列表转换为数组
    params = np.array(params)
    sim = Simulator('mqvector', circ.n_qubits)                     # 创建模拟器，backend使用‘mqvector’，能模拟5个比特（'circ'线路中包含的比特数）
    ham = build_ham(g)
    
    initial_expectation_value = calculate_initial_expectation_value(g,layer,beta,gamma)
    print('initial_ex = {}'.format(initial_expectation_value))
    
    
    
    grad_ops = sim.get_expectation_with_grad(ham, circ)            # 获取计算变分量子线路的期望值和梯度的算子
    QuantumNet = MQAnsatzOnlyLayer((grad_ops),params)
    
    
    
    opti = Adam(QuantumNet.trainable_params(), learning_rate=lr)     # 需要优化的是Quantumnet中可训练的参数，学习率设为0.5
    train_net = nn.TrainOneStepCell(QuantumNet, opti)                     # 对神经网络进行一步训练
    

    my_logger.info('lr = {},ITR = {}'.format(lr,ITR))
    loss0 = [] # 存储训练过程中期望函数值的变化
    for i in range(0,ITR+1):
        # train_net().asnumpy()是一个数组,返回优化后的期望值，注意存放的位置在测量之前
        loss = train_net().asnumpy()[0] 
        loss0.append(loss)
        
        if i >= 2:
            l = len(loss0)
            delta1 = abs(loss0[l-1] - loss0[l-2])
            delta2 = abs(loss0[l-2] - loss0[l-3])
            if delta1 <= 0.001 and delta2 <= 0.001:
                my_logger.info('达到收敛条件，消耗迭代步数为{}，优化中期望函数值变化loss0 = {}'.format(len(loss0),loss0))
                break
            else:
                # 关于哈密顿量的期望值train_net.asnumpy(),train_net()是一个Tensor
                if i%50 == 0:
                    my_logger.info("train_step = {},loss = {}".format(i,round(loss,5)))  # 每训练50步，打印当前训练步数和当前得到的期望值  

    
    # 获取优化后的参数
    beta_opt = []
    gamma_opt = []
    params = []
    
    # 获取线路参数
    pr = dict(zip(ansatz.params_name, QuantumNet.weight.asnumpy())) # 获取线路参数
    for key,value in pr.items():
        params.append(value)
    my_logger.info('优化后线路参数params = {}'.format(params))
    
    for i in range(0,len(params)):
        if i%2==0:
            gamma_opt.append(params[i])
        else:
            beta_opt.append(params[i])
       
     # 测量量子比特
    for i in g.nodes():
        circ += Measure('q_{}'.format(i)).on(i)  # 在顶点i上作用一个测量，并将该测量命名为'q_{i}'
    
#     circ.svg().to_file(filename='Circuit{}.svg'.format(len(g.nodes())))
         
    result = sim.sampling(circ, pr=pr, shots=1000)
    
    
    # 最大化loss
    return result,gamma_opt,beta_opt,-round(loss,5),loss0


# In[8]:


def global_training(ham,g,p,SEED):
    # 随机初始化2p个线路参数
    # 返回数值服从范围 [min, max) 内均匀分布的 随机tensor，形状为 shape, 数据类型dtype
    # 生成服从均匀分布的随机数,返回一个Tensor
    # minval,maxval是Tensor类型
    minval = Tensor(0, ms.float32)
    maxval = Tensor(np.pi, ms.float32)
    shape = tuple([1])
    
    # 存储初始参数的列表
    initial_beta = []
    initial_gamma = []

    # 随机初始化初始参数
    for i in range(0,p) :
        param = ops.uniform(shape,minval,maxval,seed= SEED,dtype=ms.float32)
        initial_beta.append(param.asnumpy()[0])

        param = ops.uniform(shape,minval,maxval,seed= SEED,dtype=ms.float32)
        initial_gamma.append(param.asnumpy()[0])
    my_logger.info('SEED = {},initial_beta = {},initial_gamma = {}'.format(SEED,initial_beta,initial_gamma))
        
    # 参数优化
    # 获取优化后的beta_opt,gamma_opt
    result,gamma_opt,beta_opt,loss,loss0 = execute_function(g,p,initial_beta,initial_gamma)
    return result,gamma_opt,beta_opt,loss,loss0


# In[9]:


# 构造目标哈密顿量H_D，目标函数min C = -sum(x_i),其中i = 0,1...N-1,x_i的取值为0或者1，为1代表处于顶点子集V'内
def build_ham(g):
    ham = QubitOperator()
    for i in g.nodes:
        ham += QubitOperator(f'Z{i}',0.5)
        ham += QubitOperator(f'Z{i} Z{i}',-0.5) # 对应I算子
    ham = Hamiltonian(ham)
    return ham




# 通过多次全局随机初始化寻找初始图下，固定线路深度下的max_loss以及对应的优化之后的参数
def search_optimized_parameters(depth,g,counts,SEED):
    
    ham = build_ham(g)             # 生成哈密顿量   

    value = [] # 存储每种初始参数优化后所对应的期望值
    params = [] # 存储优化后的参数
    measure_result = [] # 存储测量的结果
    ITR = [] # 存储每次运行所消耗的迭代步数
    
    my_logger.info('\n\n')

    for i in range(1,counts+1):
        my_logger.info('The {}-th global random initialization'.format(i))
        result,gamma_opt,beta_opt,loss,loss0 = global_training(ham,g,depth,SEED[i-1])

        value.append(loss)
        params.append([beta_opt,gamma_opt])
        measure_result.append(result.data)
        ITR.append(len(loss0))
    
    my_logger.info('全局随机初始化结束，输出相关信息... ...')
    my_logger.info('value = {}'.format(value))
    my_logger.info('\n\n')

    my_logger.info('params = [[beta_optimized,gamma_optimized],... ...] = {}'.format(params))
    my_logger.info('\n\n')

    my_logger.info('measure_result= {}'.format(measure_result))
    my_logger.info('\n\n')
    
    my_logger.info('consumed_iterations= {}'.format(ITR))
    my_logger.info('\n\n')
    
    
    # 计算平均期望函数值
    avg = 0
    for index in range(0,len(value)):
        avg += value[index]
    avg = avg/len(value)
    avg = round(avg,5)
    my_logger.info('avg_loss = {}'.format(avg))
    
    # 计算消耗的平均迭代次数
    avg_iterations = 0
    for j in range(0,len(ITR)):
        avg_iterations += ITR[j]
    avg_iterations = avg_iterations/len(ITR)
    avg_iterations = round(avg_iterations,5)
    my_logger.info('多次RI所消耗的平均迭代次数avg_iterations = {}'.format(avg_iterations))
    
    
    
    
    # 多次随机初始化，得到的最大期望值
    max_loss = max(value)
    my_logger.info('max_loss = {}'.format(max_loss))
    params_opt = [] #存储max_loss对应的优化后的参数
    SEED_opt = [] # max_loss对应的种子数

    for j in range(0,len(value)):
        if value[j] == max_loss:
            params_opt.append(params[j])
            SEED_opt.append(SEED[j])
    my_logger.info('params_opt = {}'.format(params_opt))
    my_logger.info('\n')
    my_logger.info('SEED_opt = {}'.format(SEED_opt))
    return params_opt,max_loss,avg,value,avg_iterations


# In[10]:


# 8顶点4-regular graph
# E = [(0, 1), (0, 3), (0, 6), (0, 5), (1, 2), (1, 4), (1, 7), (2, 4), (2, 3), (2, 5), (4, 6), (4, 7), (3, 7), (3, 5), (7, 6), (6, 5)] # graph1
# E = [(0, 7), (0, 4), (0, 6), (0, 5), (7, 3), (7, 6), (7, 1), (2, 4), (2, 1), (2, 3), (2, 5), (4, 1), (4, 5), (1, 6), (3, 6), (3, 5)] # graph2
# E = [(0, 1), (0, 7), (0, 3), (0, 5), (1, 5), (1, 4), (1, 7), (7, 5), (7, 6), (2, 4), (2, 3), (2, 6), (2, 5), (4, 3), (4, 6), (3, 6)] # graph3(独立数是2？)
# E = [(0, 7), (0, 3), (0, 2), (0, 5), (7, 6), (7, 1), (7, 4), (2, 4), (2, 6), (2, 5), (4, 3), (4, 1), (3, 6), (3, 5), (1, 5), (1, 6)] # graph4
# E = [(2, 4), (2, 1), (2, 7), (2, 5), (4, 0), (4, 3), (4, 7), (1, 5), (1, 7), (1, 3), (0, 3), (0, 6), (0, 5), (3, 6), (7, 6), (5, 6)] # graph5


# n = 8,3-regular graph
# E = [(2, 7), (2, 0), (2, 5), (7, 6), (7, 4), (0, 3), (0, 5), (3, 1), (3, 5), (4, 6), (4, 1), (6, 1)] # graph1
# E = [(0, 1), (0, 3), (0, 6), (1, 2), (1, 7), (2, 4), (2, 5), (4, 3), (4, 7), (3, 6), (5, 7), (5, 6)] # graph2 （关注）
# E = [(0, 1), (0, 2), (0, 5), (1, 4), (1, 7), (4, 6), (4, 7), (6, 2), (6, 3), (5, 7), (5, 3), (2, 3)] # graph3
# E = [(1, 2), (1, 4), (1, 7), (2, 0), (2, 5), (3, 4), (3, 0), (3, 6), (4, 6), (0, 5), (6, 7), (5, 7)] # graph4
# E = [(2, 4), (2, 3), (2, 0), (4, 0), (4, 7), (0, 5), (1, 5), (1, 7), (1, 6), (5, 6), (3, 7), (3, 6)] # graph5



# 8顶点2正则图
# E = [(0, 1), (0, 3), (1, 2), (2, 7), (7, 6), (4, 6), (4, 5), (3, 5)] # graph1
# E = [(3, 4), (3, 0), (4, 1), (0, 2), (1, 7), (6, 7), (6, 5), (2, 5)] # graph2
# E = [(0, 7), (0, 4), (7, 1), (1, 2), (2, 6), (4, 5), (5, 3), (6, 3)] # graph3 (guanzhu)
# E = [(0, 7), (0, 4), (7, 4), (2, 6), (2, 5), (6, 1), (1, 3), (5, 3)] # graph4
# E = [(2, 4), (2, 0), (4, 1), (3, 7), (3, 0), (7, 5), (5, 6), (1, 6)] # graph5



# 8顶点ER图,prob=0.5
# E = [(0, 4), (0, 5), (0, 6), (0, 7), (1, 2), (1, 3), (1, 5), (1, 7), (2, 3), (2, 5), (2, 7), (4, 6)] # m=12,graph1
# E = [(0, 1), (0, 4), (0, 7), (1, 3), (2, 3), (2, 4), (2, 5), (2, 7), (3, 4), (3, 5), (5, 6), (6, 7)] # m=12 ,graph2
# E = [(0, 1), (0, 4), (0, 5), (1, 3), (1, 6), (1, 7), (2, 4), (2, 7), (3, 4), (3, 7), (4, 5), (4, 6), (5, 6), (6, 7)] # m=14.graph3
# E = [(0, 2), (0, 4), (1, 2), (1, 3), (1, 5), (1, 6), (2, 3), (2, 4), (3, 6), (4, 6), (5, 6), (5, 7)]# m=12,graph4
# E = [(0, 1), (0, 2), (0, 3), (0, 4), (0, 6), (1, 2), (1, 3), (1, 4), (2, 3), (2, 4), (2, 5), (2, 6), (3, 4), (4, 6), (5, 6), (5, 7)]#m=16,graph5


# ER,prob=0.4
# E = [(0, 1), (0, 3), (0, 6), (1, 3), (1, 4), (1, 6), (1, 7), (2, 3), (2, 5), (3, 5), (3, 6), (3, 7), (4, 7), (6, 7)] # m=14,graph1
# E = [(0, 1), (0, 2), (0, 3), (0, 7), (1, 2), (1, 3), (2, 3), (2, 4), (2, 6), (2, 7), (3, 4), (3, 5), (3, 6), (3, 7), (4, 6), (6, 7)] # m=18,graph2
# E = [(0, 1), (0, 3), (0, 7), (1, 3), (1, 4), (1, 5), (1, 6), (1, 7), (2, 5), (2, 6), (3, 4), (3, 7), (4, 5), (4, 6), (4, 7), (5, 6), (5, 7), (6, 7)] # m=16,graph3
# E = [(0, 4), (0, 5), (0, 7), (1, 2), (1, 4), (1, 6), (2, 3), (2, 4), (2, 5), (3, 4), (3, 5), (3, 6), (3, 7), (4, 5), (4, 6), (5, 6), (5, 7)]#m=17,graph4
# E = [(0, 4), (0, 5), (0, 6), (1, 3), (1, 5), (1, 6), (1, 7), (2, 6), (2, 7), (3, 4), (3, 5), (4, 7), (5, 6), (5, 7), (6, 7)] # m=15,graph5
# E = [(0, 2), (0, 3), (0, 4), (0, 6), (0, 7), (1, 2), (1, 3), (1, 4), (1, 7), (2, 3), (2, 4), (2, 5), (2, 6), (2, 7), (3, 4), (3, 5), (3, 6), (3, 7), (4, 7), (5, 7)]# m=20,graph6
# E = [(0, 3), (0, 5), (0, 6), (1, 4), (1, 5), (1, 6), (1, 7), (2, 7), (3, 4), (3, 6), (3, 7), (4, 7), (5, 6), (5, 7), (6, 7)] # m=15,graph7
# E = [(0, 1), (0, 2), (0, 4), (0, 6), (0, 7), (1, 3), (1, 6), (1, 7), (2, 5), (2, 6), (2, 7), (3, 5), (3, 6), (3, 7), (4, 6), (5, 6), (5, 7), (6, 7)]#m = 18,graph8
# E = [(0, 1), (0, 3), (0, 4), (0, 5), (0, 7), (1, 3), (1, 4), (1, 5), (1, 6), (1, 7), (2, 5), (2, 7), (3, 4), (3, 7), (4, 6), (4, 7), (5, 6), (5, 7), (6, 7)] # m=19,graph9
# E = [(0, 4), (0, 5), (0, 6), (1, 4), (1, 6), (3, 4), (3, 5), (3, 6), (3, 7), (5, 7), (6, 7)] # m=11,graph10


# In[11]:


# 20个8顶点的ER图，prob=0.5
# 对应的独立数
# beta = [4, 3, 3, 3, 4,      4, 3, 3, 4, 3,     4, 3, 3, 4, 4,     4, 4, 4, 4, 3]
# E0 = [[(0, 3), (0, 5), (1, 2), (1, 3), (1, 4), (1, 6), (2, 3), (2, 5), (2, 7), (5, 7), (6, 7)], [(0, 1), (0, 2), (0, 3), (0, 4), (0, 7), (1, 3), (1, 4), (1, 5), (1, 7), (2, 3), (2, 6), (3, 4), (3, 5), (4, 7), (5, 6), (5, 7)], [(0, 1), (0, 5), (0, 6), (0, 7), (1, 2), (1, 3), (1, 5), (2, 6), (2, 7), (3, 4), (3, 5), (4, 5), (5, 6), (6, 7)], [(0, 1), (0, 2), (0, 4), (0, 6), (0, 7), (1, 4), (1, 5), (1, 7), (2, 3), (2, 5), (2, 6), (2, 7), (3, 5), (4, 6), (5, 6), (5, 7)], [(0, 1), (0, 2), (0, 3), (0, 4), (0, 5), (0, 6), (0, 7), (1, 7), (2, 4), (3, 4), (4, 5), (4, 6), (5, 6), (5, 7), (6, 7)], [(0, 1), (0, 3), (0, 4), (0, 7), (1, 2), (1, 3), (1, 4), (1, 5), (2, 4), (3, 4), (4, 5), (5, 7), (6, 7)], [(0, 1), (0, 3), (0, 6), (1, 2), (1, 4), (1, 6), (1, 7), (2, 4), (2, 6), (2, 7), (3, 5), (3, 6), (4, 7)], [(0, 1), (0, 2), (0, 6), (0, 7), (1, 6), (1, 7), (2, 4), (2, 5), (2, 7), (3, 4), (3, 5), (3, 6), (4, 6), (4, 7), (6, 7)], [(0, 2), (0, 4), (0, 7), (1, 3), (1, 5), (2, 5), (2, 6), (3, 5), (3, 6), (3, 7), (4, 5), (5, 6), (5, 7)], [(0, 1), (0, 3), (0, 4), (0, 5), (0, 6), (0, 7), (1, 5), (1, 6), (2, 4), (2, 5), (3, 4), (3, 5), (3, 6), (3, 7), (4, 7), (5, 7)], [(0, 2), (0, 3), (1, 3), (1, 4), (1, 6), (2, 3), (2, 4), (2, 6), (3, 5), (3, 7), (4, 5), (4, 6), (4, 7)], [(0, 3), (0, 4), (0, 5), (0, 6), (1, 2), (1, 3), (1, 4), (2, 3), (2, 5), (2, 6), (3, 5), (3, 6), (6, 7)], [(0, 1), (0, 2), (0, 3), (0, 5), (1, 2), (1, 6), (2, 4), (2, 5), (2, 7), (3, 6), (4, 5), (4, 7), (5, 7)], [(0, 1), (0, 2), (0, 6), (1, 2), (1, 4), (2, 7), (3, 6), (4, 6), (5, 6), (5, 7)], [(0, 1), (0, 3), (0, 6), (1, 2), (1, 3), (1, 6), (1, 7), (2, 3), (2, 5), (2, 7), (4, 7), (6, 7)], [(0, 2), (0, 4), (0, 6), (1, 2), (1, 4), (1, 5), (1, 7), (2, 4), (2, 5), (2, 6), (3, 4), (4, 5), (4, 6), (4, 7), (5, 6), (6, 7)], [(0, 1), (0, 6), (1, 2), (1, 3), (2, 6), (2, 7), (3, 4), (3, 6), (4, 5), (4, 6), (4, 7), (5, 7)], [(0, 2), (0, 4), (0, 5), (0, 6), (0, 7), (1, 3), (1, 4), (2, 4), (2, 6), (3, 5), (4, 5), (5, 6)], [(0, 2), (1, 2), (1, 4), (1, 6), (2, 6), (2, 7), (3, 4), (3, 5), (3, 7), (4, 5), (4, 6), (4, 7), (5, 6), (6, 7)], [(0, 2), (0, 3), (0, 4), (0, 7), (1, 2), (1, 3), (1, 5), (2, 4), (2, 6), (3, 4), (3, 6), (3, 7), (4, 6), (4, 7), (5, 6), (5, 7)]]


# In[12]:


# 20个9顶点的ER图,prob = 0.5
# beta = [3, 3, 4, 4, 4,     4, 5, 3, 4, 3,     4, 6, 3, 3, 4,    4, 3, 3, 3, 4]
# E0 = [[(0, 1), (0, 3), (0, 4), (0, 5), (0, 6), (1, 2), (1, 7), (2, 3), (2, 4), (2, 7), (2, 8), (3, 6), (4, 5), (4, 8), (5, 8)], [(0, 1), (0, 2), (0, 4), (0, 5), (0, 6), (0, 7), (0, 8), (1, 6), (1, 8), (2, 3), (2, 5), (2, 7), (2, 8), (3, 4), (3, 5), (3, 6), (3, 7), (4, 5), (5, 8), (6, 8), (7, 8)], [(0, 2), (0, 3), (0, 4), (0, 5), (0, 6), (0, 8), (1, 4), (2, 5), (2, 8), (3, 4), (3, 6), (3, 7), (4, 5), (4, 8), (5, 6), (5, 7), (7, 8)], [(0, 1), (0, 2), (0, 5), (0, 8), (1, 2), (1, 5), (2, 6), (3, 5), (3, 6), (4, 6), (4, 7), (4, 8), (5, 6), (5, 7), (6, 8)], [(0, 3), (0, 6), (0, 8), (1, 3), (1, 5), (1, 7), (1, 8), (2, 3), (2, 7), (3, 5), (3, 6), (3, 8), (4, 5), (4, 7), (5, 8), (6, 8)], [(0, 7), (0, 8), (1, 2), (1, 3), (1, 4), (1, 7), (2, 5), (2, 7), (2, 8), (3, 4), (3, 5), (3, 8), (4, 5), (4, 6), (5, 6), (5, 7), (5, 8), (6, 7), (6, 8)], [(0, 2), (0, 3), (0, 5), (0, 6), (1, 2), (1, 4), (1, 5), (1, 6), (1, 8), (2, 3), (2, 4), (2, 7), (2, 8), (3, 7)], [(0, 1), (0, 3), (0, 4), (1, 3), (1, 4), (1, 5), (2, 3), (2, 4), (2, 5), (3, 6), (3, 7), (4, 5), (4, 6), (4, 7), (5, 7), (6, 8), (7, 8)], [(0, 4), (0, 8), (1, 3), (1, 5), (1, 7), (1, 8), (2, 3), (2, 6), (2, 7), (2, 8), (3, 4), (4, 6), (4, 7), (4, 8), (6, 7), (7, 8)], [(0, 1), (0, 2), (0, 3), (0, 6), (0, 8), (1, 2), (1, 5), (1, 6), (1, 7), (1, 8), (2, 3), (2, 5), (2, 7), (2, 8), (3, 5), (3, 6), (3, 7), (3, 8), (4, 5), (4, 6), (4, 7), (5, 6), (5, 7), (5, 8), (6, 8)], [(0, 3), (0, 5), (0, 6), (0, 7), (0, 8), (1, 3), (1, 5), (1, 6), (1, 7), (1, 8), (2, 3), (2, 5), (2, 7), (3, 6), (3, 7), (3, 8), (4, 6), (4, 7), (4, 8), (5, 6), (6, 8), (7, 8)], [(0, 1), (0, 7), (1, 8), (2, 3), (2, 5), (2, 6), (2, 7), (3, 8), (4, 8), (5, 8), (6, 8), (7, 8)], [(0, 1), (0, 3), (0, 4), (0, 5), (0, 6), (0, 8), (1, 2), (1, 4), (2, 3), (2, 4), (2, 6), (3, 4), (3, 5), (3, 6), (3, 8), (5, 8), (6, 7)], [(0, 1), (0, 6), (0, 8), (1, 5), (2, 3), (2, 5), (2, 6), (2, 7), (2, 8), (3, 5), (3, 6), (3, 7), (4, 6), (4, 7), (4, 8), (5, 8), (6, 7), (6, 8)], [(0, 1), (0, 2), (0, 5), (1, 2), (1, 5), (1, 6), (2, 4), (2, 5), (2, 7), (3, 4), (3, 5), (3, 6), (4, 5), (4, 6), (4, 7), (5, 7), (6, 7)], [(0, 1), (0, 2), (0, 3), (0, 4), (0, 5), (0, 7), (1, 4), (1, 6), (2, 4), (2, 6), (2, 7), (3, 4), (4, 5), (4, 6), (4, 8), (5, 6), (5, 8), (6, 7)], [(0, 1), (0, 2), (0, 3), (0, 6), (1, 3), (1, 4), (1, 6), (1, 7), (2, 3), (2, 4), (2, 6), (2, 7), (2, 8), (3, 6), (3, 7), (3, 8), (4, 6), (4, 7), (4, 8), (5, 8), (6, 8), (7, 8)], [(0, 2), (0, 3), (0, 4), (0, 5), (0, 7), (1, 2), (1, 4), (1, 6), (2, 3), (2, 4), (2, 5), (2, 6), (2, 7), (3, 4), (3, 5), (3, 7), (4, 6), (4, 8), (5, 8), (6, 7), (6, 8)], [(0, 1), (0, 3), (0, 7), (0, 8), (1, 2), (1, 5), (1, 8), (2, 3), (2, 5), (2, 7), (3, 4), (3, 5), (3, 7), (3, 8), (4, 5), (4, 6), (4, 8), (6, 7), (6, 8)], [(0, 5), (0, 6), (1, 2), (1, 5), (2, 4), (2, 6), (2, 7), (2, 8), (3, 4), (3, 5), (3, 7), (3, 8), (4, 7), (5, 7), (5, 8), (6, 7), (7, 8)]]


# In[13]:


# 20个ER图,11顶点，prob = 0.5
# E0 = [[(0, 3), (0, 7), (0, 8), (1, 8), (1, 9), (1, 10), (2, 3), (2, 5), (2, 9), (3, 4), (3, 7), (3, 9), (4, 5), (4, 6), (4, 8), (5, 7), (5, 8), (5, 9), (5, 10), (6, 7), (6, 9), (6, 10), (7, 8), (7, 9), (7, 10), (9, 10)], [(0, 1), (0, 2), (0, 3), (0, 6), (0, 8), (0, 9), (1, 3), (1, 4), (1, 5), (1, 7), (2, 7), (2, 9), (2, 10), (3, 6), (3, 8), (3, 9), (3, 10), (4, 6), (4, 7), (4, 9), (5, 6), (5, 10), (6, 7), (6, 8), (7, 9), (7, 10)], [(0, 1), (0, 5), (0, 6), (0, 10), (1, 7), (1, 8), (1, 9), (1, 10), (2, 6), (2, 7), (3, 6), (3, 9), (3, 10), (4, 5), (4, 6), (4, 7), (4, 9), (5, 9), (5, 10), (6, 7), (6, 8), (6, 10), (7, 8), (7, 9)], [(0, 1), (0, 3), (0, 6), (0, 7), (0, 9), (0, 10), (1, 3), (1, 4), (1, 6), (1, 7), (2, 3), (2, 4), (2, 5), (2, 7), (2, 9), (3, 4), (3, 5), (3, 6), (3, 9), (3, 10), (4, 5), (4, 7), (4, 9), (5, 6), (5, 8), (6, 8), (6, 10), (7, 9), (7, 10), (8, 10), (9, 10)], [(0, 3), (0, 5), (0, 8), (0, 10), (1, 5), (1, 6), (1, 7), (1, 8), (2, 5), (2, 6), (2, 8), (3, 4), (3, 5), (3, 6), (4, 5), (4, 7), (4, 9), (4, 10), (5, 7), (5, 10), (8, 10)], [(0, 1), (0, 2), (0, 6), (0, 7), (0, 10), (1, 3), (1, 4), (1, 7), (1, 8), (1, 9), (1, 10), (2, 3), (2, 8), (3, 4), (3, 5), (3, 8), (4, 5), (4, 6), (4, 9), (4, 10), (5, 6), (5, 7), (5, 9), (5, 10), (6, 7), (6, 8), (6, 10), (7, 8), (7, 10), (8, 9), (9, 10)], [(0, 3), (0, 5), (0, 7), (0, 10), (1, 3), (1, 5), (1, 6), (1, 7), (1, 8), (1, 10), (2, 4), (2, 6), (2, 8), (2, 9), (3, 5), (3, 7), (3, 9), (3, 10), (4, 6), (4, 7), (4, 8), (4, 10), (5, 9), (5, 10), (6, 8), (6, 10), (7, 10), (8, 9), (9, 10)], [(0, 1), (0, 2), (0, 3), (0, 4), (0, 10), (1, 2), (1, 4), (1, 5), (1, 6), (1, 8), (1, 9), (1, 10), (2, 3), (2, 4), (2, 5), (2, 6), (2, 8), (2, 9), (3, 8), (3, 9), (3, 10), (4, 5), (4, 7), (5, 6), (5, 8), (6, 7), (6, 8), (6, 10), (7, 8), (7, 9), (8, 9), (9, 10)], [(0, 1), (0, 2), (0, 4), (0, 7), (0, 9), (0, 10), (1, 2), (1, 5), (1, 6), (1, 7), (1, 9), (2, 3), (2, 10), (3, 6), (3, 8), (3, 9), (4, 5), (5, 8), (5, 9), (6, 7), (6, 9), (6, 10), (7, 9), (7, 10), (8, 10)], [(0, 1), (0, 7), (1, 6), (1, 7), (1, 8), (1, 10), (2, 3), (2, 4), (2, 6), (2, 7), (2, 8), (2, 10), (3, 4), (3, 5), (3, 6), (3, 8), (3, 10), (4, 6), (4, 9), (4, 10), (5, 7), (5, 8), (5, 9), (6, 7), (6, 8), (6, 9), (7, 9), (8, 9), (8, 10)], [(0, 4), (0, 7), (0, 9), (0, 10), (1, 3), (1, 4), (1, 9), (2, 5), (2, 8), (2, 9), (2, 10), (3, 5), (4, 6), (4, 7), (4, 8), (5, 7), (5, 9), (5, 10), (6, 9), (6, 10), (7, 9), (8, 9), (8, 10), (9, 10)], [(0, 2), (0, 3), (0, 5), (0, 6), (0, 8), (0, 9), (0, 10), (1, 3), (1, 4), (1, 5), (1, 7), (1, 9), (2, 4), (2, 5), (2, 6), (2, 7), (2, 9), (2, 10), (3, 4), (3, 6), (3, 7), (3, 8), (3, 9), (4, 8), (4, 9), (4, 10), (5, 9), (6, 8), (8, 9), (8, 10), (9, 10)], [(0, 3), (0, 4), (0, 5), (0, 6), (0, 7), (0, 9), (1, 4), (1, 5), (1, 7), (1, 10), (2, 3), (2, 5), (2, 7), (2, 9), (2, 10), (3, 4), (3, 5), (3, 6), (3, 7), (3, 9), (3, 10), (4, 5), (4, 7), (4, 9), (4, 10), (5, 8), (5, 9), (5, 10), (6, 8), (7, 8), (7, 9), (8, 9), (8, 10), (9, 10)], [(0, 1), (0, 3), (0, 5), (0, 6), (0, 8), (0, 10), (1, 4), (1, 5), (1, 6), (1, 7), (1, 8), (1, 10), (2, 5), (2, 8), (2, 9), (3, 4), (3, 5), (3, 6), (3, 7), (4, 5), (4, 6), (4, 10), (5, 6), (5, 10), (6, 7), (6, 8), (7, 8), (7, 9), (7, 10), (8, 9), (8, 10)], [(0, 1), (0, 4), (0, 7), (0, 8), (0, 10), (1, 3), (1, 4), (1, 5), (1, 8), (1, 10), (2, 3), (2, 6), (3, 4), (3, 5), (3, 6), (3, 9), (3, 10), (4, 5), (4, 6), (4, 8), (4, 9), (5, 6), (5, 8), (5, 10), (6, 9), (6, 10), (7, 10), (8, 9), (9, 10)], [(0, 1), (0, 2), (0, 3), (0, 4), (0, 5), (0, 7), (0, 8), (0, 10), (1, 2), (1, 3), (1, 5), (1, 6), (1, 10), (2, 4), (2, 5), (2, 6), (2, 7), (2, 8), (2, 10), (3, 4), (3, 5), (4, 5), (4, 6), (4, 7), (4, 10), (6, 7), (6, 9), (6, 10), (7, 10), (8, 9), (9, 10)], [(0, 1), (0, 8), (1, 2), (1, 8), (1, 9), (2, 4), (2, 6), (2, 7), (2, 8), (3, 4), (3, 7), (3, 9), (3, 10), (4, 6), (4, 8), (4, 9), (5, 6), (5, 7), (5, 8), (5, 10), (6, 10)], [(0, 2), (0, 4), (0, 5), (0, 6), (0, 10), (1, 3), (1, 5), (1, 7), (1, 8), (1, 9), (2, 3), (2, 4), (2, 10), (3, 4), (3, 7), (4, 6), (4, 7), (5, 6), (5, 7), (5, 8), (5, 9), (6, 7), (6, 10), (7, 8), (7, 9), (7, 10), (8, 10), (9, 10)], [(0, 2), (0, 3), (0, 4), (0, 5), (0, 6), (0, 7), (0, 8), (0, 9), (1, 3), (1, 4), (1, 5), (1, 7), (1, 9), (1, 10), (2, 3), (2, 4), (2, 5), (2, 10), (3, 5), (3, 10), (4, 5), (4, 7), (4, 9), (4, 10), (5, 6), (5, 7), (5, 10), (7, 8)], [(0, 1), (0, 3), (0, 4), (0, 7), (0, 8), (0, 9), (0, 10), (1, 3), (1, 8), (2, 4), (2, 6), (2, 7), (3, 4), (3, 9), (3, 10), (4, 7), (4, 9), (4, 10), (5, 7), (5, 10), (7, 8), (7, 9), (7, 10), (8, 9), (8, 10), (9, 10)]]


# In[14]:


# 20个ER图,12顶点，prob = 0.5
# E0 = [[(0, 1), (0, 3), (0, 6), (0, 7), (0, 10), (0, 11), (1, 6), (1, 8), (1, 10), (2, 3), (2, 4), (2, 10), (2, 11), (3, 7), (3, 8), (3, 9), (4, 6), (4, 9), (4, 10), (5, 6), (5, 8), (5, 11), (6, 11), (7, 8), (7, 11), (8, 9), (8, 10), (8, 11), (9, 10), (9, 11), (10, 11)], [(0, 1), (0, 2), (0, 3), (0, 5), (0, 6), (0, 7), (0, 8), (0, 10), (0, 11), (1, 2), (1, 5), (1, 6), (1, 7), (1, 8), (2, 6), (2, 7), (2, 9), (2, 11), (3, 4), (3, 5), (3, 6), (3, 9), (3, 10), (3, 11), (4, 6), (4, 9), (5, 6), (5, 7), (5, 8), (5, 10), (5, 11), (6, 9), (7, 8), (7, 9), (7, 10), (7, 11), (8, 9), (8, 11)], [(0, 1), (0, 2), (0, 3), (0, 4), (0, 5), (0, 6), (0, 7), (0, 9), (0, 10), (0, 11), (1, 2), (1, 3), (1, 5), (1, 6), (1, 9), (1, 10), (1, 11), (2, 4), (2, 5), (2, 6), (2, 7), (2, 8), (2, 9), (3, 5), (3, 6), (3, 11), (4, 5), (5, 6), (5, 8), (5, 9), (5, 11), (6, 7), (6, 8), (6, 10), (6, 11), (7, 10), (7, 11), (8, 10), (8, 11), (9, 10), (9, 11), (10, 11)], [(0, 5), (0, 6), (0, 7), (0, 8), (0, 10), (0, 11), (1, 2), (1, 3), (1, 4), (1, 5), (1, 6), (1, 7), (1, 9), (1, 11), (2, 4), (2, 5), (2, 7), (2, 9), (2, 10), (2, 11), (3, 5), (3, 8), (3, 11), (4, 6), (4, 7), (4, 8), (4, 10), (4, 11), (5, 7), (5, 8), (5, 9), (6, 8), (6, 9), (6, 10), (7, 8), (7, 9), (7, 10), (7, 11), (8, 11)], [(0, 1), (0, 2), (0, 4), (0, 7), (0, 8), (0, 11), (1, 6), (1, 7), (1, 8), (1, 9), (1, 11), (2, 5), (2, 6), (2, 7), (3, 4), (3, 8), (3, 9), (4, 5), (4, 6), (4, 7), (4, 8), (4, 9), (4, 11), (5, 7), (5, 8), (5, 10), (6, 10), (6, 11), (7, 8), (8, 9), (9, 10)], [(0, 2), (0, 3), (0, 4), (0, 6), (0, 7), (0, 8), (0, 11), (1, 4), (1, 6), (2, 7), (3, 7), (3, 8), (3, 9), (4, 5), (4, 9), (4, 11), (5, 6), (5, 10), (6, 7), (6, 9), (6, 10), (6, 11), (7, 8), (10, 11)], [(0, 1), (0, 2), (0, 3), (0, 6), (0, 11), (1, 2), (1, 5), (1, 6), (1, 8), (1, 9), (1, 10), (2, 4), (2, 6), (2, 9), (3, 5), (3, 7), (3, 8), (3, 10), (4, 5), (4, 10), (4, 11), (5, 7), (6, 7), (6, 8), (6, 9), (7, 8), (7, 10), (8, 10), (8, 11), (10, 11)], [(0, 2), (0, 7), (0, 10), (0, 11), (1, 2), (1, 5), (1, 7), (1, 10), (1, 11), (2, 5), (3, 6), (3, 9), (3, 10), (3, 11), (4, 5), (4, 7), (4, 8), (4, 9), (4, 10), (5, 8), (5, 9), (6, 11), (7, 8), (7, 10), (8, 9), (8, 10), (9, 11)], [(0, 1), (0, 2), (0, 3), (0, 5), (0, 6), (0, 7), (1, 2), (1, 4), (1, 7), (1, 8), (2, 3), (2, 8), (2, 10), (2, 11), (3, 8), (3, 11), (4, 5), (4, 7), (4, 9), (5, 7), (5, 10), (5, 11), (6, 10), (9, 11), (10, 11)], [(0, 1), (0, 3), (0, 4), (0, 5), (0, 6), (0, 9), (0, 11), (1, 5), (1, 6), (1, 8), (1, 9), (1, 10), (1, 11), (2, 5), (2, 7), (2, 10), (3, 4), (3, 5), (3, 6), (3, 7), (3, 10), (4, 8), (4, 9), (4, 10), (4, 11), (5, 6), (6, 7), (6, 8), (6, 9), (6, 11), (7, 8), (7, 9), (7, 10), (7, 11), (8, 10), (9, 10)], [(0, 1), (0, 3), (0, 5), (0, 6), (0, 7), (0, 9), (0, 11), (1, 7), (1, 9), (1, 11), (2, 5), (2, 7), (2, 8), (2, 9), (2, 10), (3, 10), (3, 11), (4, 6), (4, 7), (4, 8), (4, 11), (5, 6), (5, 10), (7, 9), (9, 10), (10, 11)], [(0, 1), (0, 2), (0, 3), (0, 4), (0, 5), (0, 9), (0, 10), (0, 11), (1, 4), (1, 7), (1, 9), (1, 11), (2, 6), (2, 7), (2, 9), (2, 11), (4, 5), (4, 7), (4, 8), (4, 11), (5, 7), (5, 10), (5, 11), (6, 11), (7, 9), (7, 10), (7, 11), (8, 11), (9, 10), (9, 11)], [(0, 1), (0, 2), (0, 6), (0, 8), (0, 9), (0, 10), (0, 11), (1, 2), (1, 3), (1, 4), (1, 6), (1, 8), (1, 9), (1, 10), (1, 11), (2, 4), (2, 10), (2, 11), (3, 5), (3, 6), (3, 7), (3, 9), (3, 10), (3, 11), (4, 5), (5, 9), (5, 11), (6, 10), (7, 9), (7, 10), (9, 10), (9, 11), (10, 11)], [(0, 1), (0, 2), (0, 3), (0, 4), (0, 6), (0, 10), (0, 11), (1, 5), (1, 7), (1, 8), (1, 9), (1, 10), (1, 11), (2, 4), (2, 8), (2, 11), (3, 4), (3, 10), (3, 11), (4, 5), (4, 6), (4, 9), (4, 10), (4, 11), (5, 7), (5, 9), (5, 11), (6, 7), (6, 9), (6, 10), (6, 11), (7, 10), (8, 10), (9, 10), (9, 11), (10, 11)], [(0, 3), (0, 6), (0, 8), (0, 10), (0, 11), (1, 4), (1, 5), (1, 6), (1, 9), (1, 11), (2, 6), (2, 7), (2, 9), (2, 11), (3, 5), (3, 6), (3, 7), (3, 8), (3, 11), (4, 6), (4, 7), (4, 8), (4, 11), (5, 6), (5, 7), (5, 10), (6, 8), (6, 10), (7, 9), (8, 9), (8, 10), (8, 11), (9, 11)], [(0, 1), (0, 2), (0, 5), (0, 8), (0, 9), (0, 10), (0, 11), (1, 3), (1, 7), (1, 8), (1, 9), (1, 10), (1, 11), (2, 3), (2, 9), (2, 10), (3, 5), (3, 7), (3, 9), (3, 10), (5, 7), (5, 10), (5, 11), (6, 7), (6, 10), (7, 10), (8, 11), (9, 10), (9, 11)], [(0, 1), (0, 3), (0, 4), (0, 5), (0, 7), (0, 8), (0, 9), (1, 3), (1, 4), (1, 7), (1, 8), (1, 9), (1, 10), (2, 4), (2, 5), (2, 6), (2, 9), (2, 10), (3, 8), (3, 9), (3, 10), (3, 11), (4, 5), (4, 7), (4, 9), (4, 10), (5, 9), (5, 11), (7, 9), (7, 10), (7, 11), (10, 11)], [(0, 1), (0, 4), (0, 6), (0, 7), (0, 8), (0, 10), (0, 11), (1, 2), (1, 3), (1, 4), (1, 8), (1, 9), (2, 4), (2, 5), (2, 7), (2, 11), (3, 7), (3, 8), (3, 9), (3, 10), (4, 6), (4, 7), (4, 8), (4, 9), (4, 10), (5, 6), (5, 8), (5, 10), (6, 7), (6, 8), (6, 10), (6, 11), (7, 8), (7, 9), (7, 10), (8, 10), (9, 11)], [(0, 1), (0, 3), (0, 4), (0, 5), (0, 8), (0, 9), (0, 11), (1, 3), (1, 8), (2, 3), (2, 4), (2, 6), (2, 9), (2, 10), (2, 11), (3, 8), (3, 11), (4, 6), (4, 10), (4, 11), (5, 7), (5, 8), (5, 9), (5, 10), (5, 11), (6, 8), (6, 11), (7, 8), (7, 9), (9, 10), (10, 11)], [(0, 1), (0, 2), (0, 3), (0, 9), (1, 5), (1, 6), (1, 7), (1, 8), (1, 10), (1, 11), (2, 3), (2, 4), (2, 5), (2, 7), (2, 8), (2, 9), (2, 10), (3, 4), (3, 6), (3, 9), (3, 10), (4, 5), (4, 8), (4, 9), (4, 10), (5, 7), (5, 10), (5, 11), (6, 7), (6, 9), (6, 11), (7, 10), (8, 9), (8, 10), (8, 11)]]


# In[15]:


# 20个13顶点的ER图,prob = 0.5
# E0 = [[(0, 3), (0, 7), (0, 10), (0, 11), (0, 12), (1, 5), (1, 6), (1, 7), (1, 10), (1, 11), (1, 12), (2, 3), (2, 6), (2, 8), (2, 12), (3, 5), (3, 6), (3, 9), (3, 10), (3, 12), (4, 10), (5, 6), (5, 10), (5, 11), (5, 12), (6, 7), (6, 8), (6, 9), (6, 10), (6, 12), (7, 11), (8, 10), (8, 11), (8, 12), (9, 11), (9, 12)], [(0, 1), (0, 4), (0, 5), (0, 7), (0, 8), (0, 10), (1, 2), (1, 3), (1, 4), (1, 5), (1, 7), (1, 8), (1, 9), (1, 10), (1, 11), (2, 3), (2, 6), (2, 7), (2, 9), (3, 4), (3, 6), (3, 9), (3, 10), (3, 11), (4, 5), (4, 8), (4, 10), (4, 11), (5, 7), (5, 8), (5, 9), (5, 11), (6, 7), (6, 10), (6, 11), (7, 8), (7, 9), (7, 11), (7, 12), (8, 10), (8, 11), (8, 12), (9, 11), (9, 12), (10, 11), (11, 12)], [(0, 2), (0, 6), (0, 8), (0, 10), (0, 11), (0, 12), (1, 2), (1, 4), (1, 6), (1, 8), (1, 10), (1, 12), (2, 5), (2, 6), (2, 7), (2, 9), (2, 10), (3, 7), (3, 9), (4, 7), (4, 8), (4, 9), (5, 6), (6, 11), (6, 12), (7, 8), (7, 9), (7, 11), (8, 10), (9, 12), (10, 11), (10, 12)], [(0, 1), (0, 5), (0, 8), (1, 6), (1, 8), (1, 10), (2, 4), (2, 6), (2, 8), (2, 10), (2, 12), (3, 5), (3, 6), (3, 10), (3, 12), (4, 6), (4, 7), (4, 11), (4, 12), (5, 6), (5, 7), (5, 8), (5, 9), (5, 10), (6, 7), (6, 10), (7, 8), (7, 12), (8, 9), (8, 10), (8, 11), (9, 10), (9, 12), (10, 12), (11, 12)], [(0, 4), (0, 5), (0, 7), (0, 8), (0, 10), (0, 12), (1, 2), (1, 4), (1, 5), (1, 6), (1, 7), (1, 11), (2, 5), (2, 6), (2, 7), (2, 8), (2, 12), (3, 7), (3, 9), (3, 10), (4, 10), (4, 12), (5, 7), (5, 10), (6, 7), (6, 12), (7, 10), (8, 9), (8, 10), (8, 11), (9, 11), (10, 11)], [(0, 1), (0, 3), (0, 6), (0, 7), (0, 8), (0, 10), (0, 11), (0, 12), (1, 2), (1, 11), (1, 12), (2, 3), (2, 4), (2, 5), (2, 6), (2, 7), (2, 8), (2, 10), (2, 11), (2, 12), (3, 5), (3, 8), (3, 12), (4, 9), (4, 11), (5, 6), (5, 8), (5, 9), (5, 10), (5, 12), (6, 8), (6, 11), (7, 8), (7, 9), (7, 10), (7, 12), (8, 10), (8, 11), (9, 10), (9, 11), (10, 11), (11, 12)], [(0, 1), (0, 3), (0, 4), (0, 5), (0, 7), (0, 9), (0, 11), (1, 4), (1, 6), (1, 7), (1, 8), (1, 9), (1, 11), (1, 12), (2, 6), (2, 8), (2, 11), (2, 12), (3, 4), (3, 6), (3, 7), (3, 8), (3, 9), (3, 10), (3, 11), (4, 5), (4, 10), (4, 12), (5, 7), (5, 8), (5, 11), (5, 12), (6, 10), (6, 11), (7, 10), (7, 11), (7, 12), (8, 10), (8, 11), (8, 12), (9, 11), (10, 11), (10, 12)], [(0, 2), (0, 3), (0, 6), (0, 8), (0, 9), (0, 12), (1, 2), (1, 3), (1, 4), (1, 10), (1, 11), (2, 4), (2, 5), (2, 6), (2, 7), (2, 10), (2, 11), (2, 12), (3, 4), (3, 5), (3, 6), (3, 8), (3, 10), (3, 11), (4, 7), (4, 9), (5, 6), (5, 8), (5, 9), (5, 11), (6, 9), (6, 11), (7, 12), (8, 9), (8, 10), (8, 11), (8, 12), (9, 10), (9, 12), (10, 11), (10, 12), (11, 12)], [(0, 1), (0, 2), (0, 5), (0, 6), (0, 10), (1, 3), (1, 5), (1, 9), (1, 10), (1, 11), (1, 12), (2, 3), (2, 4), (2, 6), (2, 9), (2, 10), (3, 5), (3, 6), (3, 8), (3, 9), (3, 10), (3, 11), (3, 12), (4, 6), (4, 8), (4, 10), (4, 12), (5, 6), (5, 7), (5, 11), (6, 8), (7, 9), (7, 11), (7, 12), (8, 9), (8, 10), (9, 12), (10, 12), (11, 12)], [(0, 1), (0, 2), (0, 3), (0, 4), (0, 8), (0, 9), (0, 10), (0, 11), (1, 2), (1, 7), (1, 8), (1, 11), (2, 5), (2, 6), (2, 9), (2, 10), (2, 11), (3, 4), (3, 5), (3, 7), (3, 9), (4, 5), (4, 7), (4, 10), (4, 11), (5, 6), (5, 7), (5, 8), (5, 10), (5, 11), (5, 12), (6, 7), (6, 11), (6, 12), (7, 11), (7, 12), (8, 9), (8, 10), (9, 10), (9, 11), (10, 12), (11, 12)], [(0, 1), (0, 2), (0, 3), (0, 4), (0, 5), (0, 6), (0, 7), (0, 8), (0, 10), (0, 11), (0, 12), (1, 4), (1, 5), (1, 7), (1, 9), (1, 12), (2, 7), (2, 8), (2, 9), (2, 10), (3, 5), (3, 6), (3, 9), (3, 10), (3, 12), (4, 8), (4, 9), (4, 11), (5, 6), (5, 8), (5, 10), (5, 11), (5, 12), (6, 7), (6, 9), (6, 10), (6, 11), (7, 8), (7, 9), (8, 10), (8, 11), (9, 10)], [(0, 1), (0, 5), (0, 9), (0, 11), (0, 12), (1, 2), (1, 4), (1, 5), (1, 6), (1, 10), (1, 11), (1, 12), (2, 4), (2, 7), (2, 8), (2, 10), (2, 11), (2, 12), (3, 6), (3, 10), (3, 12), (4, 6), (4, 7), (4, 9), (4, 10), (4, 11), (4, 12), (5, 6), (5, 7), (5, 8), (5, 9), (5, 10), (6, 7), (6, 8), (6, 10), (6, 11), (7, 9), (7, 12), (8, 10), (8, 11), (9, 10), (10, 12), (11, 12)], [(0, 1), (0, 3), (0, 6), (0, 7), (0, 8), (0, 9), (0, 10), (0, 12), (1, 2), (1, 3), (1, 8), (1, 9), (1, 12), (2, 4), (2, 6), (2, 9), (2, 10), (2, 12), (3, 4), (3, 5), (3, 7), (3, 9), (3, 10), (3, 11), (4, 5), (4, 9), (5, 9), (5, 12), (6, 9), (6, 11), (7, 8), (7, 9), (7, 11), (7, 12), (8, 9), (8, 12), (9, 10), (9, 11), (9, 12), (10, 11), (10, 12)], [(0, 2), (0, 4), (0, 7), (0, 9), (0, 11), (0, 12), (1, 4), (1, 5), (1, 8), (1, 9), (1, 11), (1, 12), (2, 3), (2, 5), (2, 8), (2, 10), (2, 11), (2, 12), (3, 4), (3, 6), (3, 8), (3, 12), (4, 7), (4, 8), (4, 10), (4, 12), (5, 8), (5, 9), (5, 11), (5, 12), (6, 7), (6, 11), (7, 8), (7, 11), (8, 10), (8, 11), (8, 12), (9, 11), (9, 12), (10, 12), (11, 12)], [(0, 1), (0, 2), (0, 3), (0, 4), (0, 5), (0, 12), (1, 2), (1, 3), (1, 6), (1, 7), (1, 12), (2, 3), (2, 6), (2, 10), (2, 12), (3, 6), (3, 7), (3, 8), (3, 10), (3, 11), (4, 5), (4, 6), (4, 8), (4, 9), (4, 12), (5, 8), (5, 10), (5, 11), (5, 12), (6, 7), (6, 9), (6, 10), (6, 12), (7, 8), (7, 11), (8, 10), (8, 11), (8, 12), (9, 11), (10, 11)], [(0, 3), (0, 8), (1, 2), (1, 4), (1, 5), (1, 7), (1, 10), (1, 11), (2, 5), (2, 6), (2, 7), (2, 10), (2, 11), (3, 5), (3, 7), (3, 9), (4, 5), (4, 8), (4, 10), (4, 11), (4, 12), (5, 6), (5, 8), (6, 7), (6, 10), (6, 11), (6, 12), (7, 9), (7, 11), (7, 12), (8, 10), (8, 11), (8, 12), (9, 10), (9, 12)], [(0, 1), (0, 2), (0, 3), (0, 5), (0, 6), (0, 7), (0, 8), (0, 9), (0, 12), (1, 3), (1, 4), (1, 5), (1, 7), (1, 8), (1, 9), (1, 12), (2, 8), (2, 9), (2, 10), (3, 8), (3, 11), (3, 12), (4, 6), (4, 8), (4, 10), (4, 12), (5, 8), (5, 10), (6, 7), (6, 9), (6, 11), (7, 8), (7, 9), (7, 11), (7, 12), (8, 9), (8, 11), (8, 12), (9, 11), (10, 11), (10, 12)], [(0, 1), (0, 4), (0, 5), (0, 6), (0, 10), (1, 2), (1, 3), (1, 8), (2, 5), (2, 8), (3, 5), (3, 6), (3, 7), (3, 8), (3, 9), (3, 10), (3, 12), (4, 11), (5, 7), (5, 8), (5, 9), (5, 10), (6, 8), (6, 9), (6, 10), (6, 12), (7, 8), (7, 11), (8, 9), (9, 11), (9, 12), (10, 11), (11, 12)], [(0, 1), (0, 4), (0, 5), (0, 7), (0, 8), (0, 10), (0, 11), (0, 12), (1, 2), (1, 4), (1, 6), (1, 7), (1, 8), (1, 10), (1, 12), (2, 3), (2, 4), (2, 5), (2, 7), (2, 8), (2, 9), (3, 5), (3, 6), (3, 7), (3, 8), (3, 9), (3, 10), (4, 5), (4, 7), (4, 8), (4, 9), (4, 10), (4, 12), (5, 7), (5, 10), (6, 8), (6, 10), (6, 11), (7, 9), (7, 10), (7, 12), (8, 11), (9, 11), (9, 12), (10, 12), (11, 12)], [(0, 4), (0, 5), (0, 6), (0, 11), (1, 3), (1, 4), (1, 10), (1, 11), (1, 12), (2, 3), (2, 6), (2, 8), (2, 9), (2, 12), (3, 5), (3, 6), (3, 8), (3, 10), (4, 5), (4, 7), (4, 9), (4, 12), (5, 6), (5, 7), (5, 8), (5, 10), (5, 11), (5, 12), (6, 8), (6, 9), (6, 10), (6, 11), (7, 8), (7, 9), (7, 10), (7, 11), (8, 9), (9, 12), (10, 12), (11, 12)]]


# In[16]:


# 10顶点2正则图
# E = [(3, 4), (3, 6), (4, 1), (5, 8), (5, 7), (8, 2), (0, 9), (0, 2), (9, 1), (7, 6)] # graph1

# 10顶点2正则图
# E = [(3, 4), (3, 6), (4, 1), (5, 8), (5, 7), (8, 2), (0, 9), (0, 2), (9, 1), (7, 6)] # graph1


# 10顶点ER图 prob=0.5
# E = [(0, 2), (0, 3), (0, 5), (1, 2), (1, 5), (1, 6), (1, 7), (1, 8), (2, 3), (2, 4), (2, 5), (2, 6), (4, 5), (4, 6), (5, 6), (6, 7), (6, 9), (7, 8)] # m=18，graph1
# E = [(0, 1), (0, 2), (0, 3), (0, 4), (0, 5), (0, 7), (0, 8), (1, 5), (1, 6), (1, 7), (1, 8), (1, 9), (2, 3), (2, 6), (2, 7), (2, 8), (3, 5), (4, 6), (4, 7), (4, 8), (4, 9), (5, 6), (5, 9), (6, 9), (8, 9)] # m=25,graph2
# E = [(0, 1), (0, 3), (0, 4), (0, 5), (0, 6), (1, 2), (1, 5), (1, 9), (2, 6), (3, 7), (4, 6), (4, 8), (5, 8), (5, 9), (6, 8), (7, 9), (8, 9)]# m=17,graph3
# E = [(0, 3), (0, 4), (0, 5), (0, 7), (0, 8), (1, 2), (1, 3), (1, 4), (1, 5), (1, 6), (1, 7), (1, 8), (2, 6), (2, 9), (3, 4), (3, 5), (3, 6), (3, 8), (4, 8), (4, 9), (5, 7), (6, 7), (6, 9), (7, 8), (8, 9)] # m=25,graph4
# E = [(0, 2), (0, 4), (0, 5), (0, 7), (1, 7), (1, 9), (2, 4), (2, 7), (2, 8), (3, 8), (4, 8), (4, 9), (6, 8), (8, 9)] #m=14,graph5

# E = [(0, 2), (0, 4), (0, 5), (0, 6), (0, 9), (1, 3), (1, 4), (1, 6), (2, 3), (2, 4), (2, 5), (2, 7), (2, 8), (2, 9), (3, 4), (3, 5), (3, 6), (3, 9), (4, 6), (4, 7), (4, 8), (5, 6), (6, 8), (7, 8), (7, 9)] #m=25,graph6
# E = [(0, 1), (0, 4), (0, 5), (0, 8), (0, 9), (1, 5), (1, 9), (2, 7), (2, 8), (3, 5), (3, 8), (3, 9), (4, 5), (4, 6), (4, 8), (5, 7), (5, 8), (6, 7), (6, 9)] #m =19,graph7
# E = [(0, 1), (0, 3), (0, 5), (0, 9), (1, 4), (1, 7), (1, 8), (2, 3), (2, 6), (2, 7), (2, 8), (2, 9), (3, 6), (3, 7), (3, 9), (4, 5), (4, 6), (4, 7), (4, 9), (5, 7), (6, 7), (6, 8), (7, 9), (8, 9)] # m = 24,graph8
# E = [(0, 1), (0, 2), (0, 3), (0, 4), (1, 3), (1, 4), (1, 5), (1, 6), (2, 4), (2, 5), (2, 9), (3, 4), (3, 8), (4, 8), (6, 7), (6, 9), (7, 8)] # graph9,m=17
# E = [(0, 1), (0, 5), (0, 6), (0, 9), (1, 2), (1, 7), (1, 8), (1, 9), (2, 4), (2, 7), (2, 8), (2, 9), (3, 4), (3, 6), (3, 8), (3, 9), (4, 5), (4, 7), (5, 9), (6, 8), (6, 9), (7, 8), (7, 9), (8, 9)] #graph10,m = 24

# E = [(0, 2), (0, 5), (0, 8), (1, 3), (1, 4), (1, 5), (2, 3), (2, 4), (2, 5), (2, 6), (2, 8), (3, 5), (3, 7), (4, 5), (4, 6), (4, 7), (5, 6), (5, 8), (5, 9), (6, 7), (6, 8)] # graph11, m = 21
# E = [(0, 2), (0, 4), (0, 6), (0, 7), (0, 8), (1, 2), (1, 3), (1, 8), (1, 9), (2, 6), (2, 7), (2, 8), (3, 6), (3, 8), (4, 6), (4, 8), (4, 9), (5, 8), (5, 9), (6, 7), (6, 8), (6, 9), (7, 8), (8, 9)] # m = 24, graph12
# E = [(0, 1), (0, 5), (0, 7), (1, 2), (1, 5), (1, 6), (1, 7), (1, 9), (2, 3), (2, 4), (2, 5), (2, 9), (3, 4), (3, 6), (3, 7), (3, 8), (4, 6), (4, 7), (5, 8), (5, 9), (6, 8)]# m=21,graph13
# E = [(0, 1), (0, 5), (0, 7), (1, 2), (1, 5), (1, 6), (1, 7), (1, 9), (2, 3), (2, 4), (2, 5), (2, 9), (3, 4), (3, 6), (3, 7), (3, 8), (4, 6), (4, 7), (5, 8), (5, 9), (6, 8)]#m=25,graph14
# E = [(0, 1), (0, 4), (0, 6), (1, 2), (1, 3), (1, 4), (1, 7), (1, 9), (3, 7), (4, 5), (4, 6), (4, 7), (4, 8), (4, 9), (5, 6), (6, 7), (7, 8), (7, 9), (8, 9)] #m = 19,graph15

# E = [(0, 3), (0, 4), (0, 6), (1, 2), (1, 6), (1, 7), (1, 9), (2, 5), (2, 7), (2, 8), (2, 9), (3, 4), (3, 8), (4, 6), (4, 7), (4, 9), (5, 6), (5, 8), (6, 7), (6, 8), (6, 9), (8, 9)] # m = 22, graph16
# E = [(0, 3), (0, 4), (0, 5), (0, 7), (0, 9), (1, 2), (1, 3), (1, 7), (1, 9), (2, 3), (2, 5), (2, 6), (2, 7), (2, 8), (2, 9), (3, 4), (3, 5), (3, 7), (4, 6), (5, 7), (5, 8), (5, 9), (6, 8), (7, 8), (7, 9), (8, 9)] # m = 26,graph17
# E = [(0, 1), (0, 2), (0, 5), (0, 7), (0, 8), (0, 9), (1, 2), (1, 7), (1, 8), (2, 4), (2, 5), (2, 7), (3, 5), (3, 7), (3, 8), (3, 9), (4, 6), (4, 7), (5, 6), (5, 8), (5, 9), (6, 8), (6, 9)] #graph18, m=23
# E = [(0, 5), (0, 9), (1, 5), (1, 7), (1, 9), (2, 5), (3, 5), (3, 7), (3, 8), (4, 5), (4, 6), (4, 7), (4, 8), (6, 7)] # m = 14,graph19
# E = [(0, 4), (0, 5), (1, 2), (1, 4), (1, 5), (1, 6), (1, 8), (2, 4), (2, 5), (2, 7), (3, 4), (3, 5), (3, 6), (3, 9), (4, 6), (4, 7), (5, 6), (5, 7), (5, 8), (6, 8), (7, 8), (7, 9), (8, 9)] # graph20,m=23


# In[17]:


# 新生成的15个14顶点的ER，prob=0.4图 ，beta = [4, 3, 4, 4, 4,    4, 6, 4, 5, 4,   4, 4, 4, 4, 4]
# E0 = [[(0, 3), (0, 4), (0, 5), (0, 6), (0, 7), (0, 8), (0, 10), (0, 11), (0, 13), (1, 5), (1, 6), (1, 7), (1, 9), (1, 10), (1, 11), (2, 3), (2, 4), (2, 6), (2, 7), (2, 11), (2, 13), (3, 5), (3, 8), (3, 9), (3, 11), (3, 12), (3, 13), (4, 5), (4, 10), (4, 12), (5, 6), (5, 7), (5, 9), (5, 10), (5, 11), (5, 12), (5, 13), (6, 7), (6, 9), (6, 10), (6, 11), (7, 8), (7, 9), (7, 10), (7, 12), (8, 9), (8, 13), (9, 10), (9, 11), (9, 12), (10, 12), (11, 12), (12, 13)], [(0, 1), (0, 2), (0, 3), (0, 4), (0, 7), (0, 9), (1, 2), (1, 3), (1, 4), (1, 5), (1, 6), (1, 7), (1, 10), (1, 11), (1, 12), (1, 13), (2, 5), (2, 7), (2, 9), (2, 10), (2, 12), (2, 13), (3, 4), (3, 5), (3, 8), (3, 9), (3, 10), (3, 12), (4, 5), (4, 8), (4, 9), (4, 12), (4, 13), (5, 7), (5, 8), (5, 11), (5, 12), (5, 13), (6, 7), (6, 8), (6, 9), (6, 10), (6, 11), (6, 13), (7, 9), (7, 10), (7, 12), (8, 10), (8, 11), (8, 12), (8, 13), (9, 10), (9, 12), (9, 13), (10, 12), (10, 13), (11, 13)], [(0, 1), (0, 2), (0, 3), (0, 4), (0, 6), (0, 9), (0, 10), (0, 11), (0, 12), (0, 13), (1, 2), (1, 3), (1, 5), (1, 9), (1, 10), (1, 12), (1, 13), (2, 3), (2, 4), (2, 5), (2, 6), (2, 7), (2, 10), (2, 11), (2, 12), (3, 4), (3, 6), (3, 7), (3, 8), (3, 9), (3, 10), (3, 11), (3, 12), (3, 13), (4, 5), (4, 7), (4, 8), (4, 10), (4, 11), (4, 12), (5, 7), (5, 8), (5, 10), (5, 11), (5, 13), (6, 7), (6, 8), (6, 10), (6, 12), (6, 13), (7, 12), (7, 13), (8, 9), (8, 10), (8, 12), (8, 13), (9, 10), (9, 12), (10, 11), (11, 12), (12, 13)], [(0, 2), (0, 5), (0, 6), (0, 8), (0, 9), (0, 10), (0, 11), (1, 2), (1, 4), (1, 5), (1, 12), (2, 4), (2, 6), (2, 7), (2, 8), (2, 9), (2, 13), (3, 4), (3, 5), (3, 7), (3, 10), (3, 12), (4, 6), (4, 11), (4, 13), (5, 6), (5, 9), (5, 10), (5, 11), (5, 12), (5, 13), (6, 8), (6, 9), (6, 10), (6, 11), (6, 13), (7, 8), (7, 9), (8, 9), (8, 10), (8, 11), (8, 12), (8, 13), (9, 11), (9, 12), (9, 13), (10, 11), (10, 13), (11, 12), (12, 13)], [(0, 2), (0, 3), (0, 4), (0, 6), (0, 7), (0, 8), (0, 10), (0, 12), (0, 13), (1, 3), (1, 4), (1, 5), (1, 6), (1, 7), (1, 8), (1, 12), (1, 13), (2, 7), (2, 10), (2, 11), (2, 12), (2, 13), (3, 4), (3, 5), (3, 6), (3, 7), (3, 8), (3, 9), (3, 10), (3, 11), (3, 12), (3, 13), (4, 5), (4, 7), (4, 8), (4, 9), (4, 10), (4, 11), (4, 12), (4, 13), (5, 6), (5, 7), (5, 11), (5, 13), (6, 9), (6, 10), (6, 11), (6, 12), (7, 8), (7, 11), (7, 13), (8, 9), (8, 10), (8, 12), (9, 10), (9, 12), (10, 12), (11, 13), (12, 13)], [(0, 1), (0, 2), (0, 3), (0, 5), (0, 11), (0, 12), (1, 2), (1, 3), (1, 4), (1, 5), (1, 6), (1, 13), (2, 4), (2, 5), (2, 6), (2, 8), (2, 9), (2, 10), (2, 12), (2, 13), (3, 4), (3, 6), (3, 8), (3, 9), (3, 10), (3, 11), (3, 13), (4, 5), (4, 6), (4, 7), (4, 8), (4, 9), (4, 10), (4, 11), (4, 13), (5, 8), (5, 11), (5, 12), (5, 13), (6, 8), (6, 9), (6, 10), (7, 10), (7, 11), (7, 13), (8, 11), (8, 12), (8, 13), (9, 10), (9, 13), (10, 11), (10, 12), (10, 13), (11, 12), (11, 13)], [(0, 2), (0, 3), (0, 4), (0, 5), (0, 6), (0, 8), (0, 12), (1, 2), (1, 3), (1, 4), (1, 7), (1, 8), (1, 9), (1, 10), (1, 12), (1, 13), (2, 3), (2, 6), (2, 13), (3, 8), (3, 10), (3, 12), (4, 6), (4, 11), (4, 12), (5, 8), (5, 10), (6, 7), (6, 8), (6, 9), (6, 10), (6, 11), (6, 12), (6, 13), (7, 8), (7, 11), (8, 9), (8, 12), (8, 13), (9, 11), (10, 11), (11, 12), (11, 13), (12, 13)], [(0, 2), (0, 5), (0, 6), (0, 7), (0, 8), (0, 10), (0, 13), (1, 2), (1, 6), (1, 8), (1, 9), (1, 12), (2, 4), (2, 6), (2, 8), (2, 11), (2, 12), (3, 5), (3, 6), (3, 7), (3, 8), (3, 9), (3, 11), (3, 12), (4, 5), (4, 6), (4, 8), (4, 9), (4, 12), (4, 13), (5, 6), (5, 7), (5, 8), (5, 10), (5, 12), (6, 8), (7, 8), (7, 9), (7, 10), (7, 13), (8, 9), (8, 11), (8, 12), (8, 13), (9, 10), (10, 11), (10, 12), (11, 12), (11, 13), (12, 13)], [(0, 2), (0, 5), (0, 10), (0, 11), (0, 12), (0, 13), (1, 2), (1, 3), (1, 4), (1, 6), (1, 8), (1, 11), (1, 12), (1, 13), (2, 4), (2, 8), (2, 9), (2, 12), (3, 4), (3, 5), (3, 7), (3, 8), (3, 9), (3, 10), (3, 11), (4, 5), (4, 6), (4, 8), (4, 11), (4, 13), (5, 6), (5, 7), (5, 8), (5, 10), (5, 11), (5, 12), (6, 8), (6, 12), (7, 8), (7, 12), (7, 13), (8, 10), (8, 13), (9, 11), (9, 12), (9, 13), (10, 12), (10, 13), (11, 12), (11, 13), (12, 13)], [(0, 2), (0, 4), (0, 7), (0, 8), (0, 10), (0, 12), (1, 2), (1, 3), (1, 4), (1, 7), (1, 10), (1, 12), (1, 13), (2, 3), (2, 4), (2, 5), (2, 6), (2, 7), (2, 8), (2, 9), (2, 10), (2, 11), (3, 4), (3, 6), (3, 7), (3, 8), (3, 9), (3, 10), (3, 12), (4, 8), (4, 11), (4, 12), (4, 13), (5, 7), (5, 9), (5, 12), (6, 9), (6, 10), (6, 11), (6, 12), (7, 10), (7, 11), (8, 9), (8, 10), (8, 11), (8, 12), (9, 11), (9, 13), (10, 11), (10, 12), (10, 13), (11, 13), (12, 13)], [(0, 1), (0, 2), (0, 3), (0, 4), (0, 7), (0, 8), (0, 9), (0, 11), (0, 13), (1, 2), (1, 8), (1, 9), (1, 10), (1, 11), (1, 12), (1, 13), (2, 3), (2, 5), (2, 8), (2, 9), (2, 10), (2, 13), (3, 4), (3, 6), (3, 8), (3, 9), (4, 5), (4, 6), (4, 7), (4, 8), (4, 11), (4, 12), (5, 6), (5, 7), (5, 8), (5, 10), (5, 11), (6, 8), (6, 9), (6, 10), (6, 12), (6, 13), (7, 9), (7, 11), (7, 12), (7, 13), (8, 9), (8, 10), (9, 10), (9, 12), (9, 13), (10, 11), (11, 13)], [(0, 2), (0, 3), (0, 4), (0, 6), (0, 8), (0, 10), (0, 12), (0, 13), (1, 2), (1, 11), (1, 12), (1, 13), (2, 4), (2, 5), (2, 6), (2, 7), (2, 9), (2, 10), (2, 11), (3, 4), (3, 8), (3, 9), (3, 10), (3, 11), (4, 5), (4, 8), (4, 10), (4, 11), (4, 12), (5, 7), (5, 8), (5, 10), (5, 13), (6, 7), (6, 13), (7, 8), (7, 10), (7, 12), (8, 9), (8, 13), (9, 11), (9, 12), (9, 13), (10, 12), (10, 13), (11, 12), (12, 13)], [(0, 1), (0, 2), (0, 4), (0, 7), (0, 8), (0, 12), (0, 13), (1, 3), (1, 4), (1, 5), (1, 6), (1, 7), (1, 8), (1, 9), (1, 10), (1, 11), (1, 12), (1, 13), (2, 3), (2, 4), (2, 5), (2, 10), (2, 11), (2, 13), (3, 5), (3, 6), (3, 7), (3, 8), (3, 9), (3, 10), (3, 12), (3, 13), (4, 6), (4, 7), (4, 9), (4, 10), (4, 12), (4, 13), (5, 6), (5, 7), (5, 8), (5, 10), (5, 11), (5, 12), (6, 7), (6, 10), (6, 11), (7, 8), (7, 9), (7, 10), (8, 9), (8, 10), (8, 12), (8, 13), (9, 10), (9, 11), (9, 13), (10, 11), (10, 12), (11, 13), (12, 13)], [(0, 1), (0, 3), (0, 4), (0, 5), (0, 6), (0, 8), (0, 10), (0, 12), (0, 13), (1, 2), (1, 4), (1, 6), (1, 10), (1, 12), (2, 3), (2, 5), (2, 10), (2, 12), (2, 13), (3, 5), (3, 7), (3, 12), (4, 5), (4, 6), (4, 7), (4, 8), (4, 11), (4, 12), (4, 13), (5, 6), (5, 7), (5, 8), (5, 9), (6, 7), (6, 8), (6, 10), (6, 11), (7, 8), (7, 12), (8, 10), (8, 11), (8, 12), (8, 13), (9, 10), (9, 11), (9, 12), (10, 11), (10, 12)], [(0, 1), (0, 2), (0, 4), (0, 5), (0, 6), (0, 9), (0, 10), (0, 12), (0, 13), (1, 4), (1, 5), (1, 6), (1, 8), (1, 9), (2, 3), (2, 5), (2, 8), (2, 10), (3, 5), (3, 6), (3, 8), (3, 9), (3, 10), (3, 12), (4, 5), (4, 6), (4, 7), (4, 8), (4, 10), (4, 13), (5, 7), (5, 8), (5, 10), (5, 11), (5, 12), (5, 13), (6, 7), (6, 8), (6, 10), (6, 11), (6, 12), (7, 9), (7, 10), (7, 11), (7, 12), (7, 13), (8, 9), (8, 10), (8, 11), (8, 12), (9, 10), (9, 12), (9, 13), (10, 11), (10, 12), (10, 13), (11, 12), (11, 13), (12, 13)]]

# 15个ER，prob=0.5, beta = [4, 5, 5, 5, 5,    5, 5, 4, 4, 4,    4, 4, 4, 5, 5]
# E0 = [[(0, 1), (0, 2), (0, 3), (0, 4), (0, 5), (0, 6), (0, 8), (0, 10), (0, 12), (1, 2), (1, 4), (1, 5), (1, 6), (1, 9), (1, 10), (1, 12), (1, 13), (2, 4), (2, 7), (2, 9), (2, 10), (2, 13), (3, 4), (3, 6), (3, 8), (3, 10), (3, 11), (4, 6), (4, 8), (4, 9), (4, 10), (5, 6), (5, 7), (5, 10), (5, 11), (5, 12), (5, 13), (6, 7), (6, 11), (6, 12), (6, 13), (7, 11), (7, 12), (8, 9), (9, 12), (9, 13), (10, 11), (10, 13), (12, 13)], [(0, 2), (0, 3), (0, 4), (0, 10), (0, 12), (1, 3), (1, 4), (1, 5), (1, 6), (1, 7), (1, 9), (1, 10), (1, 11), (1, 13), (2, 3), (2, 4), (2, 6), (2, 7), (2, 9), (2, 11), (3, 5), (3, 6), (3, 11), (3, 12), (3, 13), (4, 5), (4, 6), (4, 8), (4, 12), (4, 13), (5, 7), (5, 8), (5, 12), (6, 7), (6, 8), (6, 13), (7, 8), (7, 10), (7, 11), (8, 10), (9, 12), (9, 13), (10, 11), (11, 13), (12, 13)], [(0, 1), (0, 3), (0, 4), (0, 6), (0, 7), (0, 8), (0, 10), (1, 3), (1, 5), (1, 8), (1, 11), (1, 12), (1, 13), (2, 3), (2, 4), (2, 8), (2, 11), (2, 12), (3, 4), (3, 6), (3, 7), (3, 10), (3, 12), (4, 6), (4, 8), (4, 10), (4, 12), (4, 13), (5, 7), (5, 8), (5, 9), (5, 10), (5, 11), (5, 12), (6, 8), (6, 9), (6, 10), (6, 11), (6, 13), (7, 8), (7, 11), (8, 9), (8, 11), (8, 12), (9, 12), (9, 13), (10, 11), (10, 12), (10, 13), (11, 12), (11, 13)], [(0, 1), (0, 5), (0, 8), (0, 10), (0, 11), (0, 12), (0, 13), (1, 5), (1, 6), (1, 7), (1, 9), (1, 10), (1, 13), (2, 3), (2, 4), (2, 6), (2, 10), (2, 13), (3, 4), (3, 6), (3, 7), (3, 10), (3, 11), (3, 12), (3, 13), (4, 5), (4, 6), (4, 7), (4, 10), (4, 12), (4, 13), (5, 8), (5, 10), (5, 12), (6, 7), (6, 9), (6, 12), (7, 9), (7, 12), (7, 13), (8, 9), (8, 10), (9, 11), (9, 13), (10, 11), (10, 13), (11, 13), (12, 13)], [(0, 2), (0, 6), (0, 7), (0, 8), (0, 9), (0, 11), (0, 13), (1, 2), (1, 3), (1, 8), (1, 10), (1, 11), (1, 13), (2, 4), (2, 7), (2, 10), (2, 11), (2, 12), (2, 13), (3, 5), (3, 8), (3, 9), (3, 11), (4, 5), (4, 9), (4, 12), (4, 13), (5, 11), (5, 12), (6, 9), (6, 11), (6, 12), (6, 13), (7, 9), (7, 12), (8, 10), (8, 13), (9, 10), (9, 11), (10, 11), (10, 13), (11, 12), (11, 13), (12, 13)], [(0, 1), (0, 3), (0, 9), (0, 10), (1, 4), (1, 5), (1, 6), (1, 7), (1, 8), (1, 10), (1, 11), (1, 12), (2, 4), (2, 7), (2, 8), (2, 9), (2, 10), (2, 11), (3, 4), (3, 6), (3, 7), (3, 11), (3, 12), (4, 5), (4, 7), (4, 8), (4, 10), (4, 11), (4, 12), (4, 13), (5, 10), (5, 11), (5, 13), (6, 8), (6, 9), (6, 11), (6, 12), (6, 13), (7, 8), (8, 12), (9, 11), (9, 12), (10, 12), (11, 12), (12, 13)], [(0, 5), (0, 7), (0, 8), (0, 9), (0, 12), (1, 2), (1, 3), (1, 5), (1, 8), (1, 9), (1, 12), (2, 4), (2, 5), (2, 6), (2, 7), (2, 9), (2, 10), (3, 4), (3, 7), (4, 5), (4, 7), (4, 8), (4, 10), (4, 11), (4, 12), (4, 13), (5, 6), (5, 11), (5, 13), (6, 8), (6, 9), (6, 11), (6, 12), (6, 13), (7, 9), (7, 10), (7, 12), (8, 9), (8, 11), (8, 12), (8, 13), (9, 11), (9, 13), (10, 13), (11, 12), (11, 13)], [(0, 1), (0, 2), (0, 3), (0, 4), (0, 7), (0, 8), (0, 9), (0, 10), (0, 11), (1, 2), (1, 3), (1, 7), (1, 10), (1, 12), (1, 13), (2, 7), (2, 8), (2, 9), (2, 12), (3, 4), (3, 6), (3, 7), (3, 8), (3, 9), (3, 11), (3, 12), (4, 5), (4, 6), (4, 7), (4, 12), (4, 13), (5, 7), (5, 10), (6, 7), (6, 8), (6, 11), (6, 12), (6, 13), (7, 8), (7, 11), (7, 12), (7, 13), (8, 9), (8, 10), (8, 11), (8, 12), (8, 13), (9, 10), (9, 11), (9, 12), (10, 11), (10, 12), (11, 12), (11, 13), (12, 13)], [(0, 1), (0, 2), (0, 3), (0, 5), (0, 6), (0, 7), (0, 10), (0, 13), (1, 3), (1, 5), (1, 6), (1, 7), (1, 8), (1, 9), (1, 10), (1, 11), (1, 12), (2, 3), (2, 4), (2, 5), (2, 6), (2, 7), (2, 9), (2, 10), (2, 13), (3, 5), (3, 7), (3, 8), (3, 9), (3, 10), (3, 11), (3, 13), (4, 5), (4, 6), (4, 7), (4, 8), (4, 9), (5, 6), (5, 7), (5, 8), (5, 11), (5, 13), (6, 7), (6, 8), (6, 10), (6, 11), (6, 12), (6, 13), (7, 9), (7, 10), (7, 12), (8, 11), (8, 12), (8, 13), (9, 10), (11, 12)], [(0, 2), (0, 4), (0, 5), (0, 7), (0, 8), (0, 10), (0, 12), (1, 3), (1, 6), (1, 7), (1, 8), (1, 9), (1, 11), (1, 12), (1, 13), (2, 4), (2, 7), (2, 11), (2, 12), (3, 4), (3, 5), (3, 6), (3, 7), (3, 9), (4, 5), (4, 6), (4, 10), (4, 11), (4, 12), (5, 6), (5, 7), (5, 8), (6, 9), (6, 11), (6, 12), (7, 9), (7, 10), (7, 11), (7, 12), (7, 13), (8, 11), (9, 11), (9, 13), (10, 13), (11, 12), (11, 13), (12, 13)], [(0, 1), (0, 2), (0, 4), (0, 6), (0, 8), (0, 9), (0, 10), (0, 12), (0, 13), (1, 3), (1, 5), (1, 6), (1, 7), (1, 8), (1, 10), (1, 13), (2, 5), (2, 9), (2, 10), (2, 11), (2, 12), (2, 13), (3, 6), (3, 10), (3, 12), (4, 7), (4, 11), (4, 13), (5, 6), (5, 8), (5, 9), (5, 12), (6, 9), (7, 8), (7, 10), (7, 11), (7, 12), (8, 9), (8, 10), (8, 11), (8, 13), (9, 10), (9, 13), (10, 11), (10, 13), (11, 13), (12, 13)], [(0, 2), (0, 5), (0, 6), (0, 8), (0, 9), (0, 12), (1, 2), (1, 3), (1, 4), (1, 7), (1, 8), (1, 9), (1, 11), (2, 6), (2, 7), (2, 9), (2, 12), (2, 13), (3, 5), (3, 6), (3, 8), (3, 10), (3, 12), (3, 13), (4, 5), (4, 7), (4, 8), (4, 9), (4, 10), (4, 11), (4, 12), (5, 8), (5, 9), (5, 10), (5, 12), (5, 13), (6, 7), (6, 8), (6, 10), (6, 13), (7, 8), (7, 11), (7, 12), (8, 9), (8, 12), (9, 10), (9, 13), (10, 11), (10, 12), (10, 13)], [(0, 2), (0, 3), (0, 6), (0, 8), (0, 10), (0, 11), (0, 12), (1, 2), (1, 3), (1, 4), (1, 8), (1, 13), (2, 5), (2, 6), (2, 8), (2, 9), (2, 12), (2, 13), (3, 4), (3, 5), (3, 7), (3, 8), (3, 9), (3, 10), (3, 11), (3, 12), (3, 13), (4, 6), (4, 7), (4, 8), (4, 10), (4, 11), (4, 12), (4, 13), (5, 7), (5, 8), (5, 13), (6, 7), (6, 8), (6, 10), (6, 11), (6, 13), (7, 10), (8, 9), (8, 12), (9, 11), (9, 12), (10, 11), (10, 12), (11, 12)], [(0, 2), (0, 3), (0, 4), (0, 5), (0, 8), (0, 11), (0, 12), (1, 4), (1, 5), (1, 8), (1, 10), (2, 3), (2, 6), (2, 11), (2, 13), (3, 4), (3, 5), (3, 6), (3, 10), (4, 5), (4, 7), (4, 9), (4, 10), (4, 11), (5, 6), (5, 7), (5, 9), (5, 10), (5, 11), (5, 12), (5, 13), (6, 8), (6, 10), (6, 11), (6, 13), (7, 8), (7, 9), (7, 10), (7, 12), (7, 13), (8, 9), (8, 10), (8, 11), (9, 10), (9, 12), (9, 13), (10, 13)], [(0, 1), (0, 3), (0, 5), (0, 6), (0, 8), (0, 9), (0, 11), (0, 12), (1, 2), (1, 4), (1, 6), (1, 7), (1, 11), (1, 12), (1, 13), (2, 3), (2, 5), (2, 6), (2, 8), (3, 4), (3, 6), (3, 8), (3, 13), (4, 5), (4, 6), (4, 7), (4, 8), (5, 9), (5, 10), (5, 12), (5, 13), (6, 9), (7, 10), (7, 12), (8, 9), (8, 10), (8, 11), (8, 13), (9, 11), (9, 12), (9, 13), (10, 11), (11, 12), (12, 13)]]

# 15个2-regular, beta  = [7, 7, 6, 7, 6,    6, 7, 7, 6, 7,   7, 6, 7, 7, 6]
# E0 = [[(2, 6), (2, 3), (6, 8), (5, 10), (5, 0), (10, 1), (8, 9), (12, 13), (12, 0), (13, 7), (7, 9), (3, 11), (11, 4), (1, 4)], [(7, 8), (7, 5), (8, 11), (5, 10), (10, 6), (2, 9), (2, 3), (9, 1), (11, 12), (6, 1), (0, 13), (0, 12), (13, 4), (4, 3)], [(8, 13), (8, 6), (13, 4), (6, 10), (5, 11), (5, 1), (11, 2), (10, 9), (2, 12), (0, 7), (0, 3), (7, 3), (9, 1), (4, 12)], [(4, 7), (4, 5), (7, 8), (3, 12), (3, 10), (12, 6), (2, 9), (2, 8), (9, 0), (5, 1), (10, 0), (1, 11), (6, 13), (13, 11)], [(5, 9), (5, 6), (9, 11), (1, 3), (1, 7), (3, 7), (6, 8), (8, 10), (10, 0), (4, 13), (4, 12), (13, 2), (2, 0), (11, 12)], [(0, 1), (0, 11), (1, 4), (6, 9), (6, 10), (9, 4), (5, 10), (5, 11), (8, 13), (8, 7), (13, 7), (3, 12), (3, 2), (12, 2)], [(2, 6), (2, 11), (6, 5), (3, 12), (3, 5), (12, 4), (4, 9), (9, 10), (8, 13), (8, 1), (13, 7), (7, 1), (11, 0), (10, 0)], [(0, 1), (0, 3), (1, 12), (5, 9), (5, 2), (9, 4), (2, 7), (7, 11), (3, 12), (4, 6), (8, 13), (8, 10), (13, 11), (6, 10)], [(9, 13), (9, 12), (13, 12), (2, 6), (2, 0), (6, 4), (5, 10), (5, 8), (10, 7), (1, 3), (1, 4), (3, 11), (8, 11), (0, 7)], [(0, 1), (0, 7), (1, 9), (2, 6), (2, 9), (6, 4), (8, 13), (8, 4), (13, 10), (3, 12), (3, 5), (12, 7), (10, 11), (5, 11)], [(2, 7), (2, 11), (7, 6), (4, 10), (4, 0), (10, 12), (6, 8), (8, 9), (3, 13), (3, 5), (13, 1), (1, 5), (11, 9), (12, 0)], [(4, 10), (4, 2), (10, 7), (6, 9), (6, 12), (9, 5), (5, 8), (0, 12), (0, 3), (3, 8), (2, 13), (13, 11), (7, 1), (1, 11)], [(1, 2), (1, 10), (2, 6), (4, 10), (4, 13), (6, 9), (9, 0), (0, 13), (7, 12), (7, 11), (12, 5), (5, 8), (3, 11), (3, 8)], [(9, 13), (9, 11), (13, 6), (1, 3), (1, 8), (3, 10), (4, 5), (4, 12), (5, 7), (2, 8), (2, 11), (10, 12), (7, 0), (0, 6)], [(4, 9), (4, 11), (9, 3), (8, 12), (8, 2), (12, 10), (5, 6), (5, 0), (6, 1), (2, 13), (10, 13), (3, 0), (1, 7), (7, 11)]]

# 15个3-regular, beta = [6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6]
# E0 = [[(1, 3), (1, 6), (1, 13), (3, 13), (3, 4), (10, 11), (10, 7), (10, 5), (11, 6), (11, 8), (7, 12), (7, 9), (12, 2), (12, 5), (8, 9), (8, 0), (9, 2), (6, 13), (2, 4), (5, 0), (0, 4)], [(10, 11), (10, 3), (10, 9), (11, 9), (11, 13), (5, 6), (5, 2), (5, 12), (6, 1), (6, 7), (1, 2), (1, 8), (2, 12), (12, 0), (7, 13), (7, 8), (4, 9), (4, 0), (4, 3), (3, 13), (0, 8)], [(10, 11), (10, 8), (10, 4), (11, 0), (11, 12), (2, 5), (2, 1), (2, 0), (5, 8), (5, 3), (8, 1), (1, 4), (6, 7), (6, 12), (6, 0), (7, 9), (7, 13), (4, 3), (3, 13), (13, 9), (12, 9)], [(5, 9), (5, 4), (5, 0), (9, 10), (9, 1), (1, 3), (1, 0), (3, 11), (3, 7), (11, 6), (11, 2), (4, 12), (4, 10), (12, 13), (12, 6), (7, 2), (7, 8), (13, 2), (13, 6), (8, 10), (8, 0)], [(1, 3), (1, 4), (1, 12), (3, 0), (3, 9), (8, 13), (8, 10), (8, 11), (13, 2), (13, 9), (7, 12), (7, 6), (7, 10), (12, 5), (0, 10), (0, 9), (2, 5), (2, 6), (5, 11), (6, 4), (11, 4)], [(4, 7), (4, 8), (4, 13), (7, 12), (7, 10), (1, 3), (1, 2), (1, 12), (3, 9), (3, 2), (8, 5), (8, 10), (5, 6), (5, 11), (6, 2), (6, 13), (12, 9), (0, 10), (0, 11), (0, 13), (11, 9)], [(5, 9), (5, 2), (5, 12), (9, 10), (9, 1), (10, 11), (10, 1), (11, 3), (11, 0), (2, 8), (2, 4), (8, 1), (8, 7), (3, 0), (3, 12), (4, 12), (4, 6), (0, 13), (6, 7), (6, 13), (7, 13)], [(6, 9), (6, 7), (6, 13), (9, 8), (9, 1), (10, 11), (10, 0), (10, 12), (11, 7), (11, 8), (4, 8), (4, 0), (4, 3), (5, 13), (5, 2), (5, 1), (13, 12), (2, 12), (2, 3), (0, 1), (3, 7)], [(7, 11), (7, 6), (7, 8), (11, 0), (11, 13), (5, 8), (5, 1), (5, 0), (8, 3), (4, 9), (4, 13), (4, 1), (9, 1), (9, 12), (6, 10), (6, 3), (10, 12), (10, 2), (12, 0), (13, 2), (2, 3)], [(4, 7), (4, 9), (4, 10), (7, 0), (7, 2), (0, 8), (0, 9), (5, 8), (5, 1), (5, 11), (8, 1), (1, 2), (2, 3), (9, 13), (12, 13), (12, 6), (12, 11), (13, 3), (3, 10), (10, 6), (6, 11)], [(6, 9), (6, 1), (6, 4), (9, 8), (9, 13), (1, 3), (1, 12), (3, 10), (3, 5), (0, 7), (0, 5), (0, 2), (7, 10), (7, 2), (8, 10), (8, 11), (12, 13), (12, 5), (13, 4), (4, 11), (11, 2)], [(1, 3), (1, 11), (1, 13), (3, 7), (3, 9), (7, 12), (7, 8), (12, 4), (12, 5), (5, 13), (5, 11), (13, 9), (8, 9), (8, 6), (4, 0), (4, 2), (0, 10), (0, 6), (10, 6), (10, 2), (11, 2)], [(6, 9), (6, 1), (6, 10), (9, 8), (9, 2), (8, 13), (8, 12), (13, 12), (13, 3), (0, 7), (0, 10), (0, 4), (7, 3), (7, 2), (1, 11), (1, 5), (10, 4), (3, 4), (2, 5), (5, 11), (11, 12)], [(5, 9), (5, 6), (5, 2), (9, 8), (9, 7), (10, 11), (10, 3), (10, 6), (11, 3), (11, 13), (6, 0), (3, 4), (0, 7), (0, 1), (7, 1), (8, 12), (8, 1), (4, 12), (4, 13), (12, 2), (2, 13)], [(6, 9), (6, 3), (6, 11), (9, 11), (9, 13), (1, 3), (1, 2), (1, 10), (3, 2), (8, 13), (8, 4), (8, 0), (13, 5), (4, 10), (4, 5), (7, 12), (7, 0), (7, 10), (12, 2), (12, 0), (5, 11)]]


# In[18]:


# 14个顶点，prob = 0.4
# E = [(0, 1), (0, 3), (0, 5), (0, 6), (0, 7), (0, 10), (0, 11), (1, 3), (1, 4), (1, 5), (1, 6), (1, 7), (1, 8), (1, 11), (1, 12), (2, 3), (2, 5), (2, 6), (2, 7), (2, 10), (2, 11), (3, 8), (3, 10), (3, 12), (3, 13), (4, 6), (4, 8), (4, 9), (4, 11), (4, 12), (4, 13), (5, 6), (5, 7), (5, 8), (5, 10), (5, 11), (5, 13), (6, 9), (6, 10), (6, 11), (6, 12), (6, 13), (7, 11), (7, 12), (7, 13), (8, 9), (8, 11), (9, 10), (9, 11), (9, 12), (9, 13), (10, 12), (10, 13), (11, 12), (12, 13)] # graph

# E = [(0, 1), (0, 2), (0, 4), (0, 5), (0, 6), (0, 7), (0, 8), (0, 9), (0, 10), (1, 3), (1, 5), (1, 6), (1, 8), (1, 9), (1, 10), (1, 11), (1, 12), (2, 4), (2, 7), (2, 8), (2, 10), (3, 4), (3, 7), (3, 13), (4, 8), (4, 9), (4, 12), (4, 13), (5, 6), (5, 7), (5, 9), (5, 10), (5, 11), (5, 12), (6, 7), (6, 8), (6, 9), (6, 11), (6, 12), (6, 13), (7, 8), (7, 9), (7, 10), (7, 11), (7, 13), (8, 9), (8, 12), (10, 11), (10, 12), (11, 12), (11, 13), (12, 13)] # graph2, m = 52

# E = [(0, 1), (0, 2), (0, 5), (0, 6), (0, 8), (0, 10), (0, 11), (0, 12), (1, 2), (1, 4), (1, 5), (1, 7), (1, 8), (1, 9), (1, 10), (1, 13), (2, 3), (2, 6), (2, 8), (3, 6), (3, 7), (3, 9), (3, 10), (3, 12), (3, 13), (4, 5), (4, 6), (4, 7), (4, 10), (4, 11), (4, 12), (4, 13), (5, 6), (5, 7), (5, 8), (5, 10), (5, 11), (5, 13), (6, 10), (6, 11), (6, 13), (7, 8), (7, 10), (7, 11), (7, 12), (8, 9), (8, 10), (8, 12), (9, 10), (9, 13), (10, 13), (11, 12), (12, 13)] # graph3, m = 53

# E = [(0, 5), (0, 6), (0, 7), (0, 8), (0, 10), (0, 11), (0, 12), (1, 2), (1, 3), (1, 5), (1, 7), (1, 8), (1, 9), (1, 10), (1, 11), (1, 12), (1, 13), (2, 3), (2, 4), (2, 6), (2, 9), (2, 11), (2, 12), (2, 13), (3, 4), (3, 5), (3, 6), (3, 8), (3, 10), (3, 11), (3, 12), (4, 5), (4, 6), (4, 7), (4, 9), (4, 11), (4, 12), (5, 6), (5, 7), (5, 8), (5, 9), (5, 10), (5, 12), (5, 13), (6, 7), (6, 9), (6, 12), (6, 13), (7, 8), (7, 9), (7, 10), (7, 11), (7, 13), (8, 9), (8, 10), (8, 11), (8, 12), (8, 13), (9, 10), (9, 11), (9, 13), (10, 11), (10, 12), (10, 13), (11, 12), (12, 13)] # graph4, m = 66

# E = [(0, 1), (0, 2), (0, 4), (0, 5), (0, 6), (0, 7), (0, 8), (0, 9), (0, 10), (0, 12), (1, 3), (1, 5), (1, 6), (1, 9), (1, 11), (1, 12), (1, 13), (2, 3), (2, 4), (2, 5), (2, 6), (2, 8), (3, 5), (3, 8), (3, 10), (3, 12), (4, 8), (4, 9), (4, 11), (4, 12), (5, 7), (5, 9), (5, 11), (5, 12), (6, 7), (6, 10), (6, 11), (6, 12), (7, 10), (8, 9), (8, 10), (8, 11), (8, 12), (8, 13), (9, 10), (9, 11), (9, 13), (10, 12), (10, 13), (11, 13), (12, 13)] # graph5, m = 51


# prob = 0.5
# E = [(0, 3), (0, 4), (0, 7), (0, 10), (0, 11), (1, 3), (1, 5), (1, 8), (1, 9), (1, 13), (2, 4), (2, 10), (2, 11), (3, 4), (3, 5), (3, 6), (3, 11), (3, 12), (4, 5), (4, 6), (4, 7), (4, 8), (4, 10), (4, 12), (5, 6), (5, 7), (5, 8), (5, 9), (5, 10), (5, 11), (5, 12), (6, 7), (6, 11), (6, 12), (6, 13), (7, 10), (7, 11), (7, 12), (7, 13), (8, 10), (8, 13), (9, 12), (9, 13), (11, 12), (12, 13)]#graph1,m=45
# E = [(0, 3), (0, 6), (0, 7), (0, 10), (0, 12), (0, 13), (1, 2), (1, 4), (1, 5), (1, 9), (1, 12), (1, 13), (2, 4), (2, 5), (2, 7), (2, 8), (2, 11), (2, 13), (3, 4), (3, 6), (3, 8), (3, 13), (4, 5), (4, 7), (4, 9), (4, 10), (4, 11), (4, 12), (4, 13), (5, 7), (5, 9), (5, 10), (5, 11), (5, 13), (6, 9), (6, 12), (7, 8), (7, 10), (7, 11), (7, 12), (7, 13), (8, 11), (8, 12), (9, 10), (9, 11), (10, 12), (10, 13), (11, 12), (11, 13), (12, 13)] #graph2,m=50
# E = [(0, 1), (0, 2), (0, 6), (0, 9), (0, 10), (0, 11), (0, 12), (0, 13), (1, 2), (1, 4), (1, 6), (1, 8), (1, 9), (1, 10), (1, 12), (1, 13), (2, 4), (2, 12), (2, 13), (3, 7), (3, 9), (3, 10), (3, 13), (4, 5), (4, 6), (4, 7), (4, 8), (4, 11), (5, 8), (5, 9), (5, 10), (5, 11), (5, 13), (6, 7), (6, 8), (6, 9), (6, 10), (6, 13), (7, 8), (7, 9), (7, 11), (7, 12), (7, 13), (8, 9), (8, 10), (8, 12), (8, 13), (9, 12), (10, 12), (10, 13), (12, 13)] # graph3,m=51
# E = [(0, 1), (0, 4), (0, 5), (0, 7), (0, 8), (0, 10), (0, 11), (0, 13), (1, 2), (1, 7), (1, 11), (1, 12), (2, 4), (2, 5), (2, 6), (2, 8), (2, 9), (2, 12), (3, 8), (3, 12), (3, 13), (4, 5), (4, 6), (4, 8), (4, 10), (4, 13), (5, 6), (5, 7), (5, 8), (5, 10), (5, 12), (5, 13), (6, 7), (6, 9), (6, 10), (6, 12), (6, 13), (7, 8), (7, 10), (7, 11), (7, 12), (7, 13), (8, 10), (9, 10), (10, 11), (11, 13), (12, 13)] # graph4, m = 47
# E = [(0, 3), (0, 6), (0, 7), (0, 9), (0, 12), (0, 13), (1, 4), (1, 6), (1, 9), (1, 11), (1, 12), (2, 4), (2, 8), (2, 10), (2, 11), (2, 12), (3, 4), (3, 6), (3, 7), (3, 9), (3, 11), (3, 13), (4, 5), (4, 6), (4, 9), (4, 11), (4, 13), (5, 6), (5, 7), (5, 13), (6, 7), (6, 9), (6, 10), (6, 13), (7, 8), (7, 9), (7, 10), (7, 11), (9, 10), (9, 11), (9, 12), (10, 12), (10, 13), (12, 13)] # graph5,m=44


# 14个顶点，2-regular graph
# E = [(5, 9), (5, 2), (9, 10), (4, 7), (4, 11), (7, 10), (1, 3), (1, 6), (3, 12), (12, 0), (6, 8), (8, 2), (0, 13), (13, 11)] # graph1
# E = [(1, 3), (1, 11), (3, 4), (8, 13), (8, 5), (13, 7), (2, 9), (2, 10), (9, 11), (7, 12), (12, 6), (5, 6), (10, 0), (0, 4)] # graph2
# E = [(2, 9), (2, 8), (9, 3), (6, 11), (6, 5), (11, 8), (12, 13), (12, 0), (13, 4), (5, 3), (0, 4), (7, 10), (7, 1), (10, 1)] #graph3
# E = [(7, 8), (7, 1), (8, 4), (9, 13), (9, 3), (13, 11), (4, 2), (3, 10), (10, 6), (6, 0), (0, 12), (12, 11), (1, 5), (5, 2)] # graph4
# E = [(10, 11), (10, 3), (11, 8), (8, 7), (3, 6), (4, 13), (4, 0), (13, 2), (2, 5), (0, 5), (1, 9), (1, 7), (9, 12), (6, 12)] # graph5

# 14个顶点，3-regular graph
E = [(6, 9), (6, 11), (6, 13), (9, 11), (9, 12), (5, 13), (5, 2), (5, 1), (13, 3), (0, 7), (0, 10), (0, 8), (7, 10), (7, 8), (4, 12), (4, 3), (4, 2), (12, 10), (2, 1), (1, 11), (3, 8)] #graph1
# E = [(6, 9), (6, 0), (6, 13), (9, 2), (9, 0), (5, 13), (5, 2), (5, 8), (13, 3), (3, 11), (3, 12), (11, 8), (11, 4), (2, 7), (8, 7), (10, 12), (10, 7), (10, 1), (12, 1), (0, 4), (4, 1)] #graph2
# E = [(7, 12), (7, 11), (7, 5), (12, 2), (12, 13), (8, 9), (8, 11), (8, 6), (9, 1), (9, 0), (2, 5), (2, 1), (0, 10), (0, 11), (10, 3), (10, 4), (5, 4), (1, 13), (13, 3), (3, 6), (6, 4)] #graph3
# E = [(4, 7), (4, 11), (4, 3), (7, 12), (7, 5), (10, 11), (10, 6), (10, 1), (11, 0), (12, 13), (12, 9), (2, 8), (2, 5), (2, 6), (8, 9), (8, 5), (9, 1), (0, 3), (0, 13), (3, 6), (13, 1)] #graph4
# E = [(5, 6), (5, 11), (5, 4), (6, 3), (6, 4), (3, 11), (3, 13), (11, 12), (4, 12), (12, 8), (0, 10), (0, 1), (0, 9), (10, 8), (10, 7), (1, 2), (1, 7), (2, 9), (2, 13), (9, 13), (8, 7)] #graph5


# In[19]:


# 目标图
# V = [0,1,2,3,4,5,6,7,8,9,10,11]
# V = [0,1,2,3,4,5,6,7,8,9]
V = [0,1,2,3,4,5,6,7,8,9,10,11,12,13]

# 保证顶点元素从小到大排序
V.sort()
print(V)

# E = E0[0]
target_graph = nx.Graph()
target_graph.add_nodes_from(V)
target_graph.add_edges_from(E)


# In[20]:


target_graph = nx.Graph()
target_graph.add_nodes_from(V)
target_graph.add_edges_from(E)
# 将生成的图 G 打印出来
pos = nx.circular_layout(target_graph)
options = {
    "with_labels": True,
    "font_size": 16,
    "font_weight": "bold",
    "font_color": "white",
    "node_size": 1000,
    "width": 2
}
nx.draw_networkx(target_graph, pos, **options)
ax = plt.gca()
ax.margins(0.20)
plt.axis("off")
plt.show()


# In[21]:


# p = 1
# encoder,ansatz = build_ansatz(p,target_graph,target_graph)
# circ = encoder + ansatz
# circ.svg()


# In[22]:


# p = int(input('Please input the circuit depth:')) # 固定线路深度
# times = int(input('please input the number of global training:')) # 指定全局随机初始化的次数
# p = len(target_graph.nodes()) # 设置目标线路深度为目标图规模
p = int(input('Please input the target level depth:'))


# In[23]:


# # 创建图
# old_V = [0,2,3,4]
# old_E = [(0,4)]
# initial_n = len(old_V)#初始导出子图的规模
# # 初始导出子图
# sub_graph = nx.Graph()
# sub_graph.add_nodes_from(old_V)
# sub_graph.add_edges_from(old_E)
# # 将生成的图 G 打印出来
# pos = nx.circular_layout(sub_graph)
# options = {
#     "with_labels": True,
#     "font_size": 20,
#     "font_weight": "bold",
#     "font_color": "white",
#     "node_size": 2000,
#     "width": 2
# }
# nx.draw_networkx(sub_graph, pos, **options)
# ax = plt.gca()
# ax.margins(0.20)
# plt.axis("off")
# plt.show()


# In[24]:


# # 给定初始参数，观察参数优化后的效果
# params_opt = params_opt = [[[3.137283], [0.97938067]]] # 参数列表beta,gamma
# initial_expectation_value = calculate_initial_expectation_value(sub_graph,p,params_opt[0][0],params_opt[0][1])
# my_logger.info('初始期望函数值 initial_expectation_value = {}'.format(initial_expectation_value))
# my_logger.info('\n')
# result,gamma_opt,beta_opt,loss = execute_function(sub_graph,p,params_opt[0][0],params_opt[0][1])


# In[ ]:


max_loss_depth = [] # 线路深度depth下，depth*100次RI所得到的最大期望函数值
avg_loss_depth = [] # 线路深度....平均期望函数值
params_opt_depth = [] # 线路深度depth下，depth*100次RI中找到的最佳期望函数值对应的优化后的线路参数
running_time_depth = []# 线路深度depth下，执行完depth*100次RI所需要的运行时间
iterations_depth = [] # 线路深度depth下，执行depth*100次RI所需的平均迭代步数
data = [] # 收集每个depth下获得的value数值

depth = 11 # 初始层深
beta_G = 6 # 独立数
while depth<= p:
    if depth <= 5:
        times = 100
    else:
        times = 2**depth
        
    # 随机初始化，并保留最佳期望值对应后的线路参数
    total_SEED = [] 
    for i in range(0,times):
        total_SEED.append(random.randint(1,25000))
        
#     total_SEED = [15121, 10357, 11041, 2455, 306, 3121, 12164, 17832, 19168, 3437, 20192, 19424, 17215, 23340, 14757, 8176, 4502, 10598, 11080, 13326]
    my_logger.info('depth = {},随机种子total_SEED = {}'.format(depth,total_SEED))


    start_time = time.time() #优化运行的起始时间
    params_opt, max_loss,avg_loss,value,avg_iterations = search_optimized_parameters(depth,target_graph,times,total_SEED)
    end_time = time.time()# 结束时间
    delta = end_time - start_time
    my_logger.info('start_time = {}'.format(start_time))
    my_logger.info('end_time = {}'.format(end_time))
    my_logger.info('delta = {}'.format(delta))
    my_logger.info('\n')
    
    # 存储
    iterations_depth.append(avg_iterations)
    max_loss_depth.append(max_loss)
    avg_loss_depth.append(avg_loss)
    params_opt_depth.append(params_opt)
    running_time_depth.append(delta)
    data.append(value)
    
    if (max_loss >= beta_G - 0.1) and depth >= 5:
        depth = p +1
    else:
        depth = depth+1


# In[ ]:


my_logger.info('data = {}'.format(data))
my_logger.info('\n')
my_logger.info('max_loss_depth = {}'.format(max_loss_depth))
my_logger.info('\n')
my_logger.info('avg_loss_depth = {}'.format(avg_loss_depth))
my_logger.info('\n')

my_logger.info('running_time_depth = {}'.format(running_time_depth))
my_logger.info('\n')
my_logger.info('params_opt_depth = {}'.format(params_opt_depth))
my_logger.info('\n')
my_logger.info('iterations_depth = {}'.format(iterations_depth))


# In[ ]:


# 

